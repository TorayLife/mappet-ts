{
    "classes": [
        {
            "name": "mchorse.mappet.api.scripts.user.blocks.IScriptTileEntity",
            "doc": "Tile entity interface.\n\n \u003cp\u003eThis interface represents Minecraft tile entities, which are special\n kind of entities that exist within blocks (like crafting tables, chests,\n furnance, etc.).\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var te \u003d c.getWorld().getTileEntity(371, 4, -100);\n\n        if (te.getId() \u003d\u003d\u003d \"mappet:region\")\n        {\n            var data \u003d te.getData();\n\n            // Replace on enter trigger of the tile entity to /toggledownfall\n            data.getCompound(\"Region\").setNBT(\"OnEnter\", \u0027{Blocks:[{Command:\"/toggledownfall\",Type:\"command\"}]}\u0027);\n            te.setData(data);\n        }\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftTileEntity",
                    "doc": "Get Minecraft tile entity instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "TileEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getId",
                    "doc": "Get tile entity\u0027s ID.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isInvalid",
                    "doc": "Check whether this tile entity is invalid (i.e. was removed from the world\n or unavailable for some reason).",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getData",
                    "doc": "Get (a copy of) this tile entity\u0027s NBT data.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setData",
                    "doc": "Overwrite NBT data of this tile entity. \u003cb\u003eWARNING\u003c/b\u003e: use it only if you\n know what are you doing as this method can corrupt tile entities.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "compound",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getTileData",
                    "doc": "Get Forge\u0027s custom tag compound in which you can story any\n data you want.\n\n \u003cp\u003eThere is no setter method as you can directly work with returned\n NBT compound. Any changes to returned compound \u003cb\u003ewill be reflected\n upon tile entity\u0027s data\u003c/b\u003e.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState",
            "doc": "Scripted block state.\n\n \u003cp\u003eThis interface represents a block state that can be used\n to compare or place into the world. You can use {@link mchorse.mappet.api.scripts.user.IScriptFactory#createBlockState(String, int)}\n to query for comparison.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var andesite \u003d mappet.createBlockState(\"minecraft:stone\", 5);\n\n    function main(c)\n    {\n        if (c.getWorld().getBlock(214, 3, 511).isSame(andesite))\n        {\n            c.getSubject().send(\"Block at (214, 3, 511) is indeed andesite!\");\n        }\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftBlockState",
                    "doc": "Get Minecraft block state instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "IBlockState"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getBlockId",
                    "doc": "Get block\u0027s ID like \u003ccode\u003eminecraft:stone\u003c/code\u003e.\n\n \u003cpre\u003e{@code\n    var block \u003d c.getWorld().getBlock(214, 3, 511);\n\n    c.getSubject().send(\"Block at (214, 3, 511) is \" + block.getBlockId());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getMeta",
                    "doc": "Get meta value of this state (it will always be between 0 and 15).\n\n \u003cpre\u003e{@code\n    var andesite \u003d mappet.createBlockState(\"minecraft:stone\", 5);\n\n    // This will print \"Andesite\u0027s meta is 5\"\n    c.getSubject().send(\"Andesite\u0027s meta is \" + andesite.getMeta());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isSame",
                    "doc": "Check whether this block state is same as given block state.\n\n \u003cpre\u003e{@code\n    var andesite \u003d mappet.createBlockState(\"minecraft:stone\", 5);\n\n    if (c.getWorld().getBlock(214, 3, 511).isSame(andesite))\n    {\n        c.getSubject().send(\"Block at (214, 3, 511) is indeed andesite!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isSameBlock",
                    "doc": "Check whether given block state has the same block, but\n not necessarily the same meta value.\n\n \u003cpre\u003e{@code\n    var andesite \u003d mappet.createBlockState(\"minecraft:stone\", 5);\n    var stone \u003d mappet.createBlockState(\"minecraft:stone\", 0);\n\n    // This will print true\n    c.getSubject().send(stone.isSameBlock(andesite));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isOpaque",
                    "doc": "Check whether given block state is occupying a full block entirely,\n rather than being see through or not full (1, 1, 1) block space.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "hasCollision",
                    "doc": "Check whether given block state has collision boxes. Minecraft\u0027s block\n state code requires a world instance and block coordinates to be passed,\n because collision box can be different depending on the place in the world.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "world",
                            "type": "mchorse.mappet.api.scripts.user.IScriptWorld"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isAir",
                    "doc": "Check whether given block state is air.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.data.ScriptVector",
            "doc": "Script vector (position) represents a position in the space",
            "superclass": "java.lang.Object",
            "interfaces": [],
            "methods": [
                {
                    "name": "toString",
                    "doc": "",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer",
            "doc": "Player entity interface.\n\n \u003cp\u003eThis interface represents a player entity.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        if (c.getSubject().isPlayer())\n        {\n            // Do something with the player...\n        }\n    }\n }\u003c/pre\u003e",
            "interfaces": [
                "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
            ],
            "methods": [
                {
                    "name": "getMinecraftPlayer",
                    "doc": "Get Minecraft player entity instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the\n MCP mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "EntityPlayerMP"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getGameMode",
                    "doc": "Get player\u0027s game mode.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var player \u003d c.getSubject();\n    var gamemode \u003d player.getGameMode();\n\n    if (gamemode \u003d\u003d\u003d 0)\n    {\n        player.send(\"You\u0027re in survival mode!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int",
                        "doc": "Player\u0027s game mode as an integer, \u003ccode\u003e0\u003c/code\u003e is survival, \u003ccode\u003e1\u003c/code\u003e\n is creative, \u003ccode\u003e2\u003c/code\u003e is adventure , and \u003ccode\u003e3\u003c/code\u003e is spectator."
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setGameMode",
                    "doc": "Set player\u0027s game mode.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var player \u003d c.getSubject();\n    var gamemode \u003d c.getSubject().getGameMode();\n\n    // When player exits the mining region, set their game mode back to adventure\n    if (gamemode \u003d\u003d\u003d 0 \u0026\u0026 !player.getStates().has(\"region.mining_factory\"))\n    {\n        player.setGameMode(2);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "gameMode",
                            "type": "int",
                            "doc": "Player\u0027s game mode \u003ccode\u003e0\u003c/code\u003e is survival, \u003ccode\u003e1\u003c/code\u003e\n                 is creative, \u003ccode\u003e2\u003c/code\u003e is adventure , and \u003ccode\u003e3\u003c/code\u003e is spectator."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getInventory",
                    "doc": "Get player\u0027s inventory.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var inventory \u003d c.getSubject().getInventory();\n    var item \u003d mappet.createItem(\"minecraft:diamond_sword\");\n\n    // This will change the first slot in the hotbar to a diamond sword\n    inventory.setStack(0, item);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptInventory"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getEnderChest",
                    "doc": "Get player\u0027s ender chest inventory.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var inventory \u003d c.getSubject().getEnderChest();\n    var item \u003d mappet.createItem(\"minecraft:diamond_sword\");\n\n    // This will change the first slot in player\u0027s ender chest to a diamond sword\n    inventory.setStack(0, item);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptInventory"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "executeCommand",
                    "doc": "Executes a command as a player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.getSubject().executeCommand(\"/kill\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "command",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isFlying",
                    "doc": "Returns if the player is flying.\n\n \u003cpre\u003e{@code\n    function main(c) {\n        c.send(\"Is the player flying? \" + c.getSubject().isFlying());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getWalkSpeed",
                    "doc": "Returns if the walk speed of the player.\n\n \u003cpre\u003e{@code\n    function main(c) {\n        c.send(\"The walk speed of the player is: \" + c.getSubject().getWalkSpeed());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getFlySpeed",
                    "doc": "Returns if the flight speed of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.send(\"The flight speed of the player is: \" + c.getSubject().getFlySpeed());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setWalkSpeed",
                    "doc": "Set the walk speed of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.getSubject().setWalkSpeed(0.5);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "speed",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setFlySpeed",
                    "doc": "Set the flight speed of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.getSubject().setFlySpeed(0.5);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "speed",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "resetFlySpeed",
                    "doc": "Reset the flight speed of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.getSubject().resetFlySpeed();\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "resetWalkSpeed",
                    "doc": "Reset the walking speed of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.getSubject().resetWalkSpeed();\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getCooldown",
                    "doc": "Get cooldown of a particular inventory index of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n        var cooldown \u003d player.getCooldown(player.getMainItemInventoryIndex()); // tip: 40 is the offhand slot\n\n        c.send(The held item is on cooldown for \" + cooldown + \" ticks.\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [
                        {
                            "name": "inventorySlot",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getCooldown",
                    "doc": "Get cooldown of a particular inventory index of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n        var item \u003d mappet.createItem(\"minecraft:diamond_sword\");\n        var cooldown \u003d player.getCooldown(item);\n\n        c.send(The held item cooldown \" + ((1 - cooldown) * 100) + \" percent expired.\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [
                        {
                            "name": "item",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setCooldown",
                    "doc": "Set cooldown of a particular inventory index of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n\n        player.setCooldown(player.getMainItemInventoryIndex(), 100); // tip: 40 is the offhand slot\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "inventorySlot",
                            "type": "int"
                        },
                        {
                            "name": "ticks",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setCooldown",
                    "doc": "Set cooldown for given item.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n        var item \u003d mappet.createItem(\"minecraft:diamond_sword\");\n\n        player.setCooldown(item.getItem(), 100);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "item",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        },
                        {
                            "name": "ticks",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "resetCooldown",
                    "doc": "Reset cooldown for given item.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n\n        player.resetCooldown(player.getMainItemInventoryIndex()); // tip: 40 is the offhand slot\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "inventorySlot",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "resetCooldown",
                    "doc": "Reset cooldown of a particular inventory index of the player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n        var item \u003d mappet.createItem(\"minecraft:diamond_sword\");\n\n        player.resetCooldown(item.getItem());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "item",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getHotbarIndex",
                    "doc": "Get the inventory index of main item. Useful for e.g. main hand\u0027s cooldown methods.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var player \u003d c.getSubject();\n\n        player.setCooldown(player.getMainItemInventoryIndex(), 100); //tip: 40 is the offhand slot\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setHotbarIndex",
                    "doc": "Set forcefully player\u0027s current hotbar inventory index. Acceptable values are \u003ccode\u003e0\u003c/code\u003e - \u003ccode\u003e8\u003c/code\u003e.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "slot",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "send",
                    "doc": "Send a message to this player.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    c.send(\"I love all my players equally.\");\n    c.getSubject().send(\"...but between you and me, you\u0027re my favorite player ;)\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "sendRaw",
                    "doc": "Send a message to this player using text component (like \u003ccode\u003e/tellraw\u003c/code\u003e command).\n\n \u003cpre\u003e{@code\n    var message \u003d mappet.createCompound();\n\n    message.setString(\"text\", \"This message displays an item...\");\n    message.setString(\"color\", \"gold\");\n    message.setNBT(\"hoverEvent\",\u0027{action:\"show_item\",value:\"{id:\\\\\"minecraft:diamond_hoe\\\\\",Count:1b}\"}\u0027);\n\n    c.getSubject().sendRaw(message);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBT"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getSkin",
                    "doc": "Get player\u0027s skin.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var player \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\u0027{Name:\"blockbuster.fred\",Skin:\"\u0027 + player.getSkin() + \u0027\",Pose:\"dabbing\"}\u0027);\n\n    player.setMorph(morph);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String",
                        "doc": "Resource location in format of \"minecraft:skins/...\" (which can be used in morphs)"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "sendTitleDurations",
                    "doc": "Send title and subtitle durations (in ticks, \u003ccode\u003e20\u003c/code\u003e ticks \u003d \u003ccode\u003e1\u003c/code\u003e second).\n These must be sent before sending title or subtitle.\n\n \u003cp\u003e\u003cb\u003eBEWARE\u003c/b\u003e: these durations will stay the same until player logs out, so you may want\n to change them before every time you send title and subtitle.\u003c/p\u003e\n\n \u003cp\u003eDefault values are: fadeIn \u003d \u003ccode\u003e10\u003c/code\u003e ticks, idle \u003d \u003ccode\u003e70\u003c/code\u003e ticks,\n fadeOut \u003d \u003ccode\u003e20\u003c/code\u003e ticks.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n\n    player.sendTitleDurations(5, 10, 5);\n    player.sendTitle(\"Quick!\");\n    player.sendSubtitle(\"Get into cover!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "fadeIn",
                            "type": "int",
                            "doc": "How many ticks it will take for title and subtitle to appear."
                        },
                        {
                            "name": "idle",
                            "type": "int",
                            "doc": "For how many ticks will title and subtitle stay after fading in."
                        },
                        {
                            "name": "fadeOut",
                            "type": "int",
                            "doc": "How many ticks it will take for title and subtitle to disappear after idling."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "sendTitle",
                    "doc": "Send the title to this player that will be displayed in the middle of the screen.\n\n \u003cpre\u003e{@code\n    c.getSubject().sendTitle(\"Hello, world!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "title",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "sendSubtitle",
                    "doc": "Send the subtitle to this player that will be displayed in the middle of the\n screen. Title must be sent as well, using {@link #sendTitle(String)}, in order\n for subtitle to appear.\n\n \u003cpre\u003e{@code\n    c.getSubject().sendTitle(\"Hello,\");\n    c.getSubject().sendSubtitle(\"world!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "title",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "sendActionBar",
                    "doc": "Send a message to this player that will be displayed in action bar. The duration\n of action bar line is \u003ccode\u003e60\u003c/code\u003e ticks (\u003ccode\u003e3\u003c/code\u003e seconds).",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "title",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setXp",
                    "doc": "Set experience level and amount of points for that level.\n\n \u003cpre\u003e{@code\n    // For more information of how levels work (i.e. how many points per\n    // level to level up) see this table:\n    // https://minecraft.fandom.com/wiki/Experience#Leveling_up\n\n    // Set player\u0027s XP level to 17 and half of the bar (level 17 has\n    // 42 points in total to level up)\n    c.getSubject().setXp(17, 21);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "level",
                            "type": "int",
                            "doc": "Experience level."
                        },
                        {
                            "name": "points",
                            "type": "int",
                            "doc": "Amount of experience points in that particular level."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addXp",
                    "doc": "Add experience points to this player. Inputting more points than player\u0027s\n current level can contain will result into leveling up one or more times.\n\n \u003cpre\u003e{@code\n    // For more information of how levels work (i.e. how many points per\n    // level to level up) see this table:\n    // https://minecraft.fandom.com/wiki/Experience#Leveling_up\n\n    // Add 1000 experience points\n    c.getSubject().addXp(1000);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "points",
                            "type": "int",
                            "doc": "Amount of experience points to add to player."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getXpLevel",
                    "doc": "Get player\u0027s current experience level.\n\n \u003cpre\u003e{@code\n    // For more information of how levels work (i.e. how many points per\n    // level to level up) see this table:\n    // https://minecraft.fandom.com/wiki/Experience#Leveling_up\n\n    var s \u003d c.getSubject();\n\n    if (s.getXpLevel() \u003c 50)\n    {\n        var section \u003d \"§\";\n\n        // Teleport the player out of the area\n        s.setPosition(10, 4, -15);\n        s.send(\"Come back when you\u0027re level\" + section + \"7 50\" + section + \"r!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getXpPoints",
                    "doc": "Get player\u0027s experience points in their current level.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setHunger",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getHunger",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setSaturation",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getSaturation",
                    "doc": "",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "playSound",
                    "doc": "Play a sound event only to this player.\n\n \u003cp\u003eFor all possible sound event IDs, please refer to either \u003ccode\u003e/playsound\u003c/code\u003e\n command, or script editor\u0027s sound picker.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n    var pos \u003d player.getPosition();\n\n    player.playSound(\"minecraft:entity.pig.ambient\", pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playSound",
                    "doc": "Play a sound event only to this player at specific sound channel.\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n    var pos \u003d player.getPosition();\n\n    player.playSound(\"minecraft:entity.pig.ambient\", \"voice\", pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "soundCategory",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playSound",
                    "doc": "Play a sound event only to this player with volume and pitch at specific channel.\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n    var pos \u003d player.getPosition();\n\n    player.playSound(\"minecraft:entity.pig.ambient\", \"voice\", pos.x, pos.y, pos.z, 1.0, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "soundCategory",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playSound",
                    "doc": "Play a sound event only to this player with volume and pitch.\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n    var pos \u003d player.getPosition();\n\n    player.playSound(\"minecraft:entity.pig.ambient\", pos.x, pos.y, pos.z, 1.0, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stopAllSounds",
                    "doc": "Stop all playing sound events for this player.\n\n \u003cpre\u003e{@code\n    c.getWorld().stopAllSounds();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "stopSound",
                    "doc": "Stop specific sound event for this player.\n\n \u003cpre\u003e{@code\n    c.getWorld().stopSound(\"minecraft:entity.pig.ambient\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stopSound",
                    "doc": "\u003cp\u003eStop specific sound event in given sound category for this player.\u003c/p\u003e\n\n \u003cp\u003eFor list of sound categories, type into chat\n \u003ccode\u003e/playsound minecraft:entity.pig.ambient\u003c/code\u003e, press space, and press\n Tab key. The list of sounds categories will be displayed.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    c.getWorld().stopSound(\"minecraft:entity.pig.ambient\", \"master\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "category",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playStaticSound",
                    "doc": "Play a sound event to this player stationary.\n\n \u003cp\u003eThe difference between this method and {@link #playSound(String, double, double, double, float, float)}\n is that if player will get teleported, the sound will continue playing.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n\n    player.playStaticSound(\"minecraft:block.portal.ambient\", 1.0, 0.8);\n\n    c.scheduleScript(20, function (c)\n    {\n        c.getSubject().setPosition(-15, 4, 561);\n    });\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playStaticSound",
                    "doc": "Play a sound event to this player stationary at specific channel.\n\n \u003cp\u003eThe difference between this method and {@link #playSound(String, double, double, double, float, float)}\n is that if player will get teleported, the sound will continue playing.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var player \u003d c.getSubject();\n\n    player.playStaticSound(\"minecraft:block.portal.ambient\", \"voice\", 1.0, 0.8);\n\n    c.scheduleScript(20, function (c)\n    {\n        c.getSubject().setPosition(-15, 4, 561);\n    });\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "soundCategory",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getQuests",
                    "doc": "Get entity\u0027s quests (if it has some, only players have quests).\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var quests \u003d c.getSubject().getQuests();\n\n    if (!quests.has(\"important_quest\"))\n    {\n        c.getSubject().send(\"I think you should complete the main quest chain before attempting side quests...\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetQuests"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "openUI",
                    "doc": "Open UI for this player.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var button \u003d ui.button(\"Push me\").id(\"button\");\n\n        // Place a button in the middle of the screen\n        button.rxy(0.5, 0.5).wh(80, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "builder",
                            "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "openUI",
                    "doc": "Open UI for this player with default data populated.\n\n \u003cp\u003eBy default, default data population is disabled, meaning that\n once the UI was opened, UI context\u0027s data will be empty. By enabling\n default data population, UI context\u0027s data gets filled with all\n component\u0027s default data.\u003c/p\u003e\n\n \u003cp\u003eThis is useful when you need to data to be present in the handler\n at start, so you wouldn\u0027t need to do extra checks.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.button(\"Push me\").id(\"button\");\n        var name \u003d ui.textbox(\"John\").id(\"name\");\n        var lastname \u003d ui.textbox(\"Smith\").id(\"lastname\");\n\n        // Place a button in the middle of the screen\n        button.rxy(0.5, 0.5).wh(80, 20).anchor(0.5);\n        name.rx(0.5).ry(0.5, 25).wh(80, 20).anchor(0.5);\n        lastname.rx(0.5).ry(0.5, 50).wh(80, 20).anchor(0.5);\n\n        // Open the UI with default data populated\n        c.getSubject().openUI(ui, true);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        // If false was passed into openUI as second argument\n        // Then name or last name wouldn\u0027t be immediately populated\n        // as John Smith\n        c.send(\"Your name is: \" + data.getString(\"name\") + \" \" + data.getString(\"lastname\"));\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "builder",
                            "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                        },
                        {
                            "name": "defaultData",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "closeUI",
                    "doc": "Close the user interface.\n\n \u003cp\u003eYou can use this method to close any GUI that player has opened, inventory,\n chests, command block menu, Mappet dashboard, etc. However, Mappet won\u0027t close\n the in-game pause menu (to avoid potential griefing).\u003c/p\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getUIContext",
                    "doc": "Get the UI context of currently opened user UI. See {@link IMappetUIContext}\n for code examples.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIContext"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getFactions",
                    "doc": "Returns the faction of the npc as a string\n\n \u003cpre\u003e{@code\n for each (var faction in c.getSubject().getFactions()){\n    c.send(faction)\n }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.Set"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setupHUD",
                    "doc": "Setup (initiate) an HUD scene for this player.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String",
                            "doc": "HUD scene\u0027s ID/filename."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "changeHUDMorph",
                    "doc": "Change a morph in a HUD scene at given index with given morph.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String",
                            "doc": "HUD scene\u0027s ID/filename."
                        },
                        {
                            "name": "index",
                            "type": "int",
                            "doc": "Index of the morph in the scene that should be changed (0 is the first, and so on)."
                        },
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "closeAllHUD",
                    "doc": "Close all HUD scenes.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "closeHUD",
                    "doc": "Close specific HUD scene for this player.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String",
                            "doc": "HUD scene\u0027s ID/filename."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDisplayedHUDs",
                    "doc": "Get all HUD scenes that are currently displayed for this player.\n\n \u003cpre\u003e{@code\n   var player \u003d c.getSubject();\n   var huds \u003d player.getDisplayedHUDs();\n   print(huds);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "playScene",
                    "doc": "Plays an Aperture scene for this player.\n\n \u003cpre\u003e{@code\n c.getSubject().playScene(\"scene_name\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "sceneName",
                            "type": "java.lang.String",
                            "doc": "Scene\u0027s ID."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stopScene",
                    "doc": "Plays Aperture scenes for this player.\n\n \u003cpre\u003e{@code\n c.getSubject().stopScene();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.entities.IScriptNpc",
            "doc": "Mappet\u0027s NPC entity interface.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        if (c.getSubject().isNpc())\n        {\n            // Do something with the NPC...\n        }\n    }\n }\u003c/pre\u003e",
            "interfaces": [
                "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
            ],
            "methods": [
                {
                    "name": "getMappetNpc",
                    "doc": "Get Mappet entity NPC instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the\n MCP mappings in order to directly call methods on this instance!\n\n \u003cp\u003eBut some methods might have human readable method names. Please\n check \u003ca href\u003d\"https://github.com/mchorse/mappet/blob/master/src/main/java/mchorse/mappet/entities/EntityNpc.java\"\u003eEntityNpc\u003c/a\u003e class for methods that\n don\u0027t have {@link Override} annotation!\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.entities.EntityNpc"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getNpcId",
                    "doc": "Get NPC\u0027s NPC ID.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n    var npc \u003d c.getWorld().spawnNpc(\"test\", pos.x, pos.y + 2, pos.z);\n\n    // This will output \"true\" as long as you have an NPC configured\n    // in Mappet\u0027s NPC dashboard panel\n    c.send(npc.getNpcId() \u003d\u003d\u003d \"test\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getNpcState",
                    "doc": "Get NPC\u0027s state.\n\n \u003cpre\u003e{@code\n    c.send(c.getSubject().getNpcState());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setNpcState",
                    "doc": "Set NPC\u0027s state.\n\n \u003cpre\u003e{@code\n    c.getSubject().setNpcState(\"default\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "stateId",
                            "type": "java.lang.String",
                            "doc": "state ID"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "canPickUpLoot",
                    "doc": "Make NPC can pick up stuff.\n\n \u003cpre\u003e{@code\n    c.getSubject().canPickUpLoot(true);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "canPickUpLoot",
                            "type": "boolean",
                            "doc": "true if NPC can pick up stuff, false otherwise"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "follow",
                    "doc": "Make NPC follow a target.\n\n \u003cpre\u003e{@code\n    c.getSubject().follow(\"@r\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "target",
                            "type": "java.lang.String",
                            "doc": "Target to follow (can be a player name, @r)"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setOnTickTrigger",
                    "doc": "Sets NPC\u0027s tick trigger (Use this if you want to edit an existing `on tick trigger`).\n\n \u003cpre\u003e{@code\n    c.getSubject().setOnTickTrigger(\"ScriptName\", \"FunctionName\", 1, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "Script name"
                        },
                        {
                            "name": "functionName",
                            "type": "java.lang.String",
                            "doc": "Function name"
                        },
                        {
                            "name": "frequency",
                            "type": "int",
                            "doc": "Frequency"
                        },
                        {
                            "name": "blockIndex",
                            "type": "int",
                            "doc": "Block number"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addOnTickTrigger",
                    "doc": "Adds a new `on tick trigger` to the NPC.\n\n \u003cpre\u003e{@code\n    c.getSubject().addOnTickTrigger(\"ScriptName\", \"FunctionName\", 1);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "Script name"
                        },
                        {
                            "name": "functionName",
                            "type": "java.lang.String",
                            "doc": "Function name"
                        },
                        {
                            "name": "frequency",
                            "type": "int",
                            "doc": "Frequency"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearOnTickTriggers",
                    "doc": "Removes all `on tick` triggers from the NPC.\n\n \u003cpre\u003e{@code\n    c.getSubject().clearOnTickTriggers();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setOnInteractTrigger",
                    "doc": "Sets NPC\u0027s on interaction trigger.\n\n \u003cpre\u003e{@code\n    c.getSubject().setOnInteractTrigger(\"ScriptName\", \"FunctionName\", 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "Script name"
                        },
                        {
                            "name": "functionName",
                            "type": "java.lang.String",
                            "doc": "Function name"
                        },
                        {
                            "name": "blockIndex",
                            "type": "int",
                            "doc": "Block number"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addOnInteractTrigger",
                    "doc": "Adds NPC\u0027s on interaction trigger.\n\n \u003cpre\u003e{@code\n    c.getSubject().addOnInteractTrigger(\"ScriptName\", \"FunctionName\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "Script name"
                        },
                        {
                            "name": "functionName",
                            "type": "java.lang.String",
                            "doc": "Function name"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearOnInteractTriggers",
                    "doc": "Clears NPC\u0027s on interaction triggers.\n\n \u003cpre\u003e{@code\n    c.getSubject().clearOnInteractTriggers();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setPatrol",
                    "doc": "Sets NPC\u0027s patrol point with a script trigger.\n\n \u003cpre\u003e{@code\n    c.getSubject().setPatrol(x, y, z, \"ScriptName\", \"FunctionName\", 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int",
                            "doc": "X coordinate"
                        },
                        {
                            "name": "y",
                            "type": "int",
                            "doc": "Y coordinate"
                        },
                        {
                            "name": "z",
                            "type": "int",
                            "doc": "Z coordinate"
                        },
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "Script name"
                        },
                        {
                            "name": "functionName",
                            "type": "java.lang.String",
                            "doc": "Function name"
                        },
                        {
                            "name": "patrolIndex",
                            "type": "int",
                            "doc": "Patrol index"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addPatrol",
                    "doc": "Adds a new NPC\u0027s patrol point with a script trigger.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int",
                            "doc": "X coordinate"
                        },
                        {
                            "name": "y",
                            "type": "int",
                            "doc": "Y coordinate"
                        },
                        {
                            "name": "z",
                            "type": "int",
                            "doc": "Z coordinate"
                        },
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "Script name"
                        },
                        {
                            "name": "functionName",
                            "type": "java.lang.String",
                            "doc": "Function name"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearPatrolPoints",
                    "doc": "Removes all NPC\u0027s patrol points.\n\n \u003cpre\u003e{@code\n c.getSubject().clearPatrolPoints();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getFaction",
                    "doc": "Returns the faction of the npc as a string\n\n \u003cpre\u003e{@code\n c.send(c.getSubject().getFaction())\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.entities.IScriptEntity",
            "doc": "Entity interface.\n\n \u003cp\u003eThis interface represents an entity, it could be a player, NPC,\n or any other entity. \u003cb\u003eIMPORTANT\u003c/b\u003e: any method that marks an argument or return\n as of {@link IScriptEntity} type can return also {@link IScriptPlayer} if it\u0027s an\n actual player, or {@link IScriptNpc} if it\u0027s a Mappet NPC!\u003c/p\u003e\n\n \u003cpre\u003e{@code\n     function main(c)\n     {\n         if (c.getSubject().isPlayer())\n         {\n             // Do something with the player...\n         }\n         if (c.getSubject().isNpc())\n         {\n             // Do something with the NPC...\n         }\n         else\n         {\n             // Do something with the entity...\n         }\n     }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftEntity",
                    "doc": "Get Minecraft entity instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "Entity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getWorld",
                    "doc": "Get entity\u0027s world.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var world \u003d s.getWorld();\n\n    world.setRaining(true);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptWorld"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getFancyWorld",
                    "doc": "Get entity\u0027s fancy world.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var fancyWorld \u003d s.getFancyWorld();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptFancyWorld"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getPosition",
                    "doc": "Get entity\u0027s position.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    c.send(c.getSubject().getName() + \"\u0027s position is (\" + pos.x + \", \" + pos.y + \", \" + pos.z + \")\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.data.ScriptVector"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setPosition",
                    "doc": "Set entity\u0027s position (teleport).\n\n \u003cpre\u003e{@code\n    c.getSubject().setPosition(800, 8, -135);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getMotion",
                    "doc": "Get entity\u0027s motion.\n\n \u003cpre\u003e{@code\n    var motion \u003d c.getSubject().getMotion();\n\n    c.send(c.getSubject().getName() + \"\u0027s motion is (\" + motion.x + \", \" + motion.y + \", \" + motion.z + \")\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.data.ScriptVector"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setMotion",
                    "doc": "Set entity\u0027s motion.\n\n \u003cpre\u003e{@code\n    var motion \u003d c.getSubject().getMotion();\n\n    if (motion.y \u003c 0)\n    {\n        // Reverse the falling motion into a jumping up motion\n        c.getSubject().setMotion(motion.x, -motion.y, motion.z);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addMotion",
                    "doc": "Set entity\u0027s server-sided motion. (\u003ccode\u003e.setMotion()\u003c/code\u003e causes rubber banding)\n Adds to the current velocity of the entity.\n\n \u003cpre\u003e{@code\n     // Throw all items in the air\n     for each (var item in c.getServer().getEntities(\"@e[type\u003ditem]\"))\n     {\n         item.addVelocity(0, 0.3, 0);\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getRotations",
                    "doc": "Get entity\u0027s rotation (x is pitch, y is yaw, and z is yaw head, if entity\n is living base).\n\n \u003cpre\u003e{@code\n     var rotations \u003d c.getSubject().getRotations();\n     var pitch \u003d rotations.x;\n     var yaw \u003d rotations.y;\n     var yaw_head \u003d rotations.z;\n\n     c.send(c.getSubject().getName() + \"\u0027s rotations are (\" + pitch + \", \" + yaw + \", \" + yaw_head + \")\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.data.ScriptVector"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setRotations",
                    "doc": "Set entity\u0027s rotation.\n\n \u003cpre\u003e{@code\n    // Make entity look at west\n    c.getSubject().setRotations(0, 0, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "pitch",
                            "type": "float"
                        },
                        {
                            "name": "yaw",
                            "type": "float"
                        },
                        {
                            "name": "yawHead",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getPitch",
                    "doc": "Get entity\u0027s pitch (vertical rotation).",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getYaw",
                    "doc": "Get entity\u0027s yaw (horizontal rotation).",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getYawHead",
                    "doc": "Get entity\u0027s head yaw.",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getLook",
                    "doc": "Get a vector in which direction entity looks.\n\n \u003cpre\u003e{@code\n     var look \u003d c.getSubject().getLook();\n\n     c.getSubject().setMotion(look.x * 0.5, look.y * 0.5, look.z * 0.5);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.data.ScriptVector"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getEyeHeight",
                    "doc": "Returns the eye height of the entity.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n\n    c.send(\"This entity\u0027s eye height is: \" + s.getEyeHeight());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getWidth",
                    "doc": "Get entity\u0027s current hitbox width (and depth, it\u0027s the same number).",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getHeight",
                    "doc": "Get entity\u0027s current hitbox height.",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getHp",
                    "doc": "Get health points of this entity (20 is the max default for players).\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n\n    if (subject.getHp() \u003c 10)\n    {\n        subject.send(\"Man, you need to replenish your health!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setHp",
                    "doc": "Set entity\u0027s health points. Given value that is more than max HP will get limited to max HP.\n\n \u003cpre\u003e{@code\n    // If entity\u0027s health goes below 5 hearts, restore to max\n    var subject \u003d c.getSubject();\n\n    if (subject.getHp() \u003c 10)\n    {\n        subject.setHp(subject.getMaxHp());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "hp",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getMaxHp",
                    "doc": "Get maximum health points this entity can have.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n\n    subject.send(subject.getName() + \" can have up to \" + subject.getMaxHp() + \" HP!);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isInWater",
                    "doc": "Check whether this entity is in water.\n\n \u003cpre\u003e{@code\n     var subject \u003d c.getSubject();\n\n     c.send(\"Is the entity in water? \" + subject.isInWater());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isInLava",
                    "doc": "Check whether this entity is in lava.\n\n \u003cpre\u003e{@code\n     var subject \u003d c.getSubject();\n\n     c.send(\"Is the entity in lava? \" + subject.isInLava());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isBurning",
                    "doc": "Check whether this entity is on fire.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n\n    // Extinguish the entity if it\u0027s on fire\n    if (subject.isBurning())\n    {\n        subject.setBurning(0);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setBurning",
                    "doc": "Set entity on fire for given amount of ticks. If \u003ccode\u003e0\u003c/code\u003e will be\n provided as the sole argument, then entity\u0027s fire will be extinguished.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n    var ray \u003d subject.rayTrace(32);\n\n    if (ray.isEntity())\n    {\n        ray.getEntity().setBurning(2);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "seconds",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isSneaking",
                    "doc": "Is this entity is sneaking.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n\n    if (subject.isSneaking())\n    {\n        subject.send(\"You completed Simon\u0027s task!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isSprinting",
                    "doc": "Is this entity is sprinting.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n\n    if (subject.isSprinting())\n    {\n        subject.send(\"This way, you\u0027ll run away way faster from zombies!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isOnGround",
                    "doc": "Is this entity on the ground.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "rayTrace",
                    "doc": "Ray trace from entity\u0027s looking direction (including any entity intersection).\n Check {@link IScriptRayTrace} for an example.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptRayTrace"
                    },
                    "arguments": [
                        {
                            "name": "maxDistance",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rayTraceBlock",
                    "doc": "Ray trace from entity\u0027s looking direction (excluding entities).\n Check {@link IScriptRayTrace} for an example.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptRayTrace"
                    },
                    "arguments": [
                        {
                            "name": "maxDistance",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getMainItem",
                    "doc": "Get item held in main hand.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n    var item \u003d subject.getMainItem();\n\n    // Lightning bolt admin stick idk I didn\u0027t play on servers\n    if (item.getItem().getId() \u003d\u003d\u003d \"minecraft:stick\")\n    {\n        c.executeCommand(\"/summon lightning_bolt ~ ~ ~\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setMainItem",
                    "doc": "Set item held in main hand.\n\n \u003cpre\u003e{@code\n    // We did a little bit of trolling\n    c.getSubject().setMainItem(mappet.createItem(\"minecraft:diamond_hoe\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getOffItem",
                    "doc": "Get item held in off hand.\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n    var item \u003d subject.getOffItem();\n\n    // Lightning bolt admin stick (but in off hand) idk I didn\u0027t play on servers\n    if (item.getItem().getId() \u003d\u003d\u003d \"minecraft:stick\")\n    {\n        c.executeCommand(\"/summon lightning_bolt ~ ~ ~\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setOffItem",
                    "doc": "Set item held in off hand.\n\n \u003cpre\u003e{@code\n    c.getSubject().setMainItem(mappet.createItem(\"minecraft:shield\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getHelmet",
                    "doc": "Return the entity\u0027s helmet\u0027s item stack.\n\n \u003cpre\u003e{@code\n   c.send( c.getSubject().getHelmet().serialize() )\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getChestplate",
                    "doc": "Return the entity\u0027s  chestplate\u0027s item stack.\n\n \u003cpre\u003e{@code\n   c.send( c.getSubject().getChestplate().serialize() )\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getLeggings",
                    "doc": "Return the entity\u0027s  leggings\u0027 item stack.\n\n \u003cpre\u003e{@code\n   c.send( c.getSubject().getLeggings().serialize() )\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getBoots",
                    "doc": "Return the entity\u0027s  boots\u0027 item stack.\n\n \u003cpre\u003e{@code\n   c.send( c.getSubject().getBoots().serialize() )\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setHelmet",
                    "doc": "Set the entity\u0027s  helemt.\n\n \u003cpre\u003e{@code\n   var item \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_helmet\\\",Count:1b,tag:{ench:[{lvl:3s,id:0s}],RepairCost:1},Damage:0s}\"));\n   c.getSubject().setHelmet(item)\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "itemStack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setChestplate",
                    "doc": "Set the entity\u0027s  chestplate.\n\n \u003cpre\u003e{@code\n   var item \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_chestplate\\\",Count:1b,tag:{ench:[{id:0,lvl:4}],RepairCost:1},Damage:0s}\"));\n   c.getSubject().setChestplate(item)\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "itemStack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setLeggings",
                    "doc": "Set the entity\u0027s  leggings.\n\n \u003cpre\u003e{@code\n   var item \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_leggings\\\",Count:1b,tag:{ench:[{id:0,lvl:4}],RepairCost:1},Damage:0s}\"));\n   c.getSubject().setLeggings(item)\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "itemStack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setBoots",
                    "doc": "Set the entity\u0027s  boots.\n\n \u003cpre\u003e{@code\n   var item \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_boots\\\",Count:1b,tag:{ench:[{id:0,lvl:4}],RepairCost:1},Damage:0s}\"));\n   c.getSubject().setBoots(item)\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "itemStack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setArmor",
                    "doc": "Set the entity\u0027s  whole armor set.\n\n \u003cpre\u003e{@code\n     var players \u003d c.getServer().getAllPlayers();\n\n     for each (var player in players)\n     {\n         var helmet \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_helmet\\\",Count:1b,tag:{ench:[{id:0s,lvl:3s}],RepairCost:1},Damage:0s}\"));\n         var chestplate \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_chestplate\\\",Count:1b,tag:{ench:[{id:0,lvl:4}],RepairCost:1},Damage:0s}\"));\n         var leggings \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_leggings\\\",Count:1b,tag:{ench:[{id:0,lvl:4}],RepairCost:1},Damage:0s}\"));\n         var boots \u003d mappet.createItemNBT(mappet.createCompound(\"{id:\\\"minecraft:diamond_boots\\\",Count:1b,tag:{ench:[{id:0,lvl:4}],RepairCost:1},Damage:0s}\"));\n\n         player.setArmor(helmet, chestplate, leggings, boots)\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "helmet",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        },
                        {
                            "name": "chestplate",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        },
                        {
                            "name": "leggings",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        },
                        {
                            "name": "boots",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearArmor",
                    "doc": "Clear the entity\u0027s  whole armor set.\n\n \u003cpre\u003e{@code\n   var players \u003d c.getServer().getEntities(\"@e[type\u003dplayer]\");\n   for each (var player in players){\n       player.clearArmor()\n   }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setSpeed",
                    "doc": "Set entity\u0027s speed.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "speed",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getTarget",
                    "doc": "Get this entity\u0027s attack target.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setTarget",
                    "doc": "Set this entity\u0027s attack target to given entity.\n\n \u003cpre\u003e{@code\n     // Stop the entity that you\u0027re looking at from targeting you.\n     function main(c)\n     {\n         var s \u003d c.getSubject();\n         var ray \u003d s.rayTrace(64);\n\n         if (ray.isEntity())\n         {\n             ray.getEntity().setTarget(null)\n         }\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "entity",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isAIEnabled",
                    "doc": "Check whether entity\u0027s AI is enabled.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setAIEnabled",
                    "doc": "Set entity\u0027s AI to be enabled or disabled (if it has it).",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "enabled",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getUniqueId",
                    "doc": "Get unique ID of this entity, which can be used, if needed, in\n commands as a target selector.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getEntityId",
                    "doc": "Get entity\u0027s resource location ID, like \u003ccode\u003eminecraft:pig\u003c/code\u003e or\n \u003ccode\u003eminecraft:zombie\u003c/code\u003e.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getTicks",
                    "doc": "Get how many ticks did this entity existed.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getCombinedLight",
                    "doc": "Get combined light value of where the entity is currently standing.\n In order to get torch and sky light values separately, see the example below\n to \"unpack\" the combined value.\n\n \u003cpre\u003e{@code\n     var light \u003d c.getPlayer().getCombinedLight();\n     var skyLight \u003d light / 65536 / 15;\n     var torchLight \u003d light % 65536 / 15;\n\n     // Do something with skyLight and torchLight\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getName",
                    "doc": "Get entity name.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setName",
                    "doc": "Set entity name.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "name",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setInvisible",
                    "doc": "Set entity to invisible.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "invisible",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getFullData",
                    "doc": "Get entity\u0027s full (copy of its) NBT data.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setFullData",
                    "doc": "Overwrite NBT data of this entity. \u003cb\u003eWARNING\u003c/b\u003e: use it only if you know\n what are you doing as this method can corrupt entities.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "data",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getEntityData",
                    "doc": "Get Forge\u0027s custom tag compound in which you can story any\n data you want.\n\n \u003cp\u003eThere is no setter method as you can directly work with returned\n NBT compound. Any changes to returned compound \u003cb\u003ewill be reflected\n upon entity\u0027s data\u003c/b\u003e.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isPlayer",
                    "doc": "Check whether this entity is a player.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isNpc",
                    "doc": "Check whether this entity is an NPC.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isLivingBase",
                    "doc": "Check whether this entity is living base.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isSame",
                    "doc": "Check whether this entity is same as given entity.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "entity",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isEntityInRadius",
                    "doc": "Check if an entity is in a radius of another specific entity\n\n \u003cpre\u003e{@code\n     // Kills all cows within 5 blocks of the player\n     function main(c)\n     {\n         var tracker \u003d c.getSubject();\n         var trackedEntities \u003d c.getServer().getEntities(\"@e[type\u003dcow]\");\n\n         for each (var trackedEntity in trackedEntities)\n         {\n             if (trackedEntity.isEntityInRadius(tracker, 5))\n             {\n                 trackedEntity.kill();\n             }\n         }\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "entity",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                        },
                        {
                            "name": "radius",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isInBlock",
                    "doc": "Check if this entity is standing in a given block.\n\n \u003cpre\u003e{@code\n     var s \u003d c.getSubject();\n\n     if (s.isInBlock(0, 0, 0))\n     {\n         c.send(s.getName() + \" is at (0, 0, 0)!\");\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isInArea",
                    "doc": "Check if this entity is standing in a given area.\n\n \u003cpre\u003e{@code\n     var s \u003d c.getSubject();\n\n     if (s.isInAnArea(20, 3, 100, 30, 8, 110))\n     {\n         c.send(s.getName() + \" is within given area!\");\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "double"
                        },
                        {
                            "name": "y1",
                            "type": "double"
                        },
                        {
                            "name": "z1",
                            "type": "double"
                        },
                        {
                            "name": "x2",
                            "type": "double"
                        },
                        {
                            "name": "y2",
                            "type": "double"
                        },
                        {
                            "name": "z2",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "damage",
                    "doc": "Inflict some damage on this entity (use {@link #kill()} to kill the entity though).",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "health",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "damageAs",
                    "doc": "Damage this entity as given entity was the source of attack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "entity",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                        },
                        {
                            "name": "health",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "damageWithItemsAs",
                    "doc": "Damage this entity as given player was the source of the attack with its equipment.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "player",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "mount",
                    "doc": "Mount this entity to given entity.\n\n \u003cpre\u003e{@code\n     function main(c)\n     {\n         var s \u003d c.getSubject();\n         var ray \u003d s.rayTrace(64);\n\n         if (ray.isEntity())\n         {\n              s.mount(ray.getEntity(), 1);\n         }\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "entity",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dismount",
                    "doc": "Dismount this entity from the entity it\u0027s riding.\n\n \u003cpre\u003e{@code\n     function main(c)\n     {\n          c.getSubject().dismount()\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getMount",
                    "doc": "Returns the entity that this entity rides on.\n\n \u003cpre\u003e{@code\n     var s \u003d c.getSubject();\n\n     s.getMount();\n }\u003c/pre",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "dropItem",
                    "doc": "Drop the item an entity is holding.\n\n \u003cpre\u003e{@code\n     var s \u003d c.getSubject();\n\n     s.dropItem(10);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "amount",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dropItem",
                    "doc": "Drop one item of what the entity is holding.\n\n \u003cpre\u003e{@code\n     var s \u003d c.getSubject();\n\n     s.dropItem();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "dropItem",
                    "doc": "Drop an item of the entity even if it is not holding it.\n Therefore, it doesn\u0027t remove the item from the entity\u0027s inventory.\n\n \u003cpre\u003e{@code\n     var item \u003d mappet.createItemNBT(\"{id:\\\"minecraft:stone\\\",Count:64b,Damage:0s}\");\n\n     c.getSubject().dropItem(item)\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "itemStack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getFallDistance",
                    "doc": "Get entity\u0027s fall distance.",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setFallDistance",
                    "doc": "Set entity\u0027s fall distance.\n\n \u003cp\u003eYou can use this method, by calling it with \u003ccode\u003e0\u003c/code\u003e, to prevent fall\n damage when teleporting an entity which was already falling.\u003c/p\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "distance",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "remove",
                    "doc": "Remove this entity from the server without any dead effects (essentially despawn).",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "kill",
                    "doc": "Kill this entity from the server by inflicting lots of damage\n (similar to \u003ccode\u003e/kill\u003c/code\u003e command).",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "swingArm",
                    "doc": "Swing entity\u0027s main hand.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "swingArm",
                    "doc": "Swing entity\u0027s arm.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "arm",
                            "type": "int",
                            "doc": "\u003ccode\u003e0\u003c/code\u003e is primary (main), \u003ccode\u003e1\u003c/code\u003e is secondary (off-hand)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setModifier",
                    "doc": "Set entity\u0027s modifier to a certain value.\n\n \u003cpre\u003e{@code\n     c.getSubject().setModifier(\"generic.movementSpeed\", \"0.5\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "modifierName",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getModifier",
                    "doc": "Return an entity\u0027s modifier.\n\n \u003cpre\u003e{@code\n     c.send(c.getSubject().getModifier(\"generic.movementSpeed\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "double"
                    },
                    "arguments": [
                        {
                            "name": "modifierName",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "removeModifier",
                    "doc": "Remove entity\u0027s modifier.\n\n \u003cpre\u003e{@code\n     c.getSubject().removeModifier(\"generic.movementSpeed\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "modifierName",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "removeAllModifiers",
                    "doc": "Remove all the modifiers of the entity.\n\n \u003cpre\u003e{@code\n     c.getSubject().removeAllModifiers();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "applyPotion",
                    "doc": "Apply given potion effect on the entity for given duration, with given amplifier,\n and optionally with particles.\n\n \u003cp\u003e\u003cb\u003eAttention\u003c/b\u003e: potion effects work only with living base entities, so check for\n {@link #isLivingBase()}! You can get the potion effect using\n {@link IScriptFactory#getPotion(String)}.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var slowness \u003d mappet.getPotion(\"slowness\");\n    var subject \u003d c.getSubject();\n\n    subject.applyPotion(slowness, 200, 1, false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "potion",
                            "type": "Potion",
                            "doc": "Potion that should be applied."
                        },
                        {
                            "name": "duration",
                            "type": "int",
                            "doc": "Duration of the effect in ticks (\u003ccode\u003e20\u003c/code\u003e ticks \u003d \u003ccode\u003e1\u003c/code\u003e second)."
                        },
                        {
                            "name": "amplifier",
                            "type": "int",
                            "doc": "How strong is potion effect."
                        },
                        {
                            "name": "particles",
                            "type": "boolean",
                            "doc": "Whether potion effect\u0027s particles should be emitted."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "hasPotion",
                    "doc": "Check whether given potion effect is present on this entity.\n\n \u003cp\u003e\u003cb\u003eAttention\u003c/b\u003e: potion effects work only with living base entities, so check for\n {@link #isLivingBase()}! You can get the potion effect using\n {@link IScriptFactory#getPotion(String)}.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var slowness \u003d mappet.getPotion(\"slowness\");\n    var subject \u003d c.getSubject();\n\n    if (subject.hasPotion(slowness))\n    {\n        subject.send(\"You\u0027re kind of slow, my dude...\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "potion",
                            "type": "Potion"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "removePotion",
                    "doc": "Remove given potion effect from this entity.\n\n \u003cp\u003e\u003cb\u003eAttention\u003c/b\u003e: potion effects work only with living base entities, so check for\n {@link #isLivingBase()}! You can get the potion effect using\n {@link IScriptFactory#getPotion(String)}.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var slowness \u003d mappet.getPotion(\"slowness\");\n    var subject \u003d c.getSubject();\n\n    if (subject.removePotion(slowness))\n    {\n        subject.send(\"I made you faster, no need to thank me ;)\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "\u003ccode\u003etrue\u003c/code\u003e if there was effect, and it was successfully removed,\n         \u003ccode\u003efalse\u003c/code\u003e if had no given effect present."
                    },
                    "arguments": [
                        {
                            "name": "potion",
                            "type": "Potion"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearPotions",
                    "doc": "Remove all potion effects from this entity.\n\n \u003cp\u003e\u003cb\u003eAttention\u003c/b\u003e: potion effects work only with living base entities, so check for\n {@link #isLivingBase()}! You can get the potion effect using\n {@link IScriptFactory#getPotion(String)}.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var subject \u003d c.getSubject();\n\n    subject.clearPotions();\n    subject.send(\"You\u0027ve been freed from all potion effects!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getStates",
                    "doc": "Get entity\u0027s states (if it has some, only players and NPCs have states).",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetStates",
                        "doc": "entity\u0027s states, or null if this entity doesn\u0027t have states."
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getMorph",
                    "doc": "Get entity\u0027s morph (works with player and NPCs).\n\n \u003cpre\u003e{@code\n    // Assuming s is a player\n    var s \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\"{Name:\\\"blockbuster.alex\\\"}\");\n    var entityMorph \u003d s.getMorph();\n\n    if (entityMorph !\u003d null \u0026\u0026 entityMorph.equals(morph))\n    {\n        c.send(s.getName() + \" is morphed into Alex morph!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "AbstractMorph"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setMorph",
                    "doc": "Set entity\u0027s morph (works with player and NPCs).\n\n \u003cpre\u003e{@code\n    var morph \u003d mappet.createMorph(\"{Name:\\\"blockbuster.alex\\\"}\");\n\n    // Assuming c.getSubject() is a player or an NPC\n    c.getSubject().setMorph(morph);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "if entity\u0027s morph was changed successfully."
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players that see this entity (including themselves).",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        },
                        {
                            "name": "expiration",
                            "type": "int"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players that see this entity (including themselves) with\n toggleable following rotation.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\u0027{Name:\"item\"}\u0027);\n\n    s.displayMorph(morph, 100, 0, s.getHeight() + 0.5, 0, true);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "rotate",
                            "type": "boolean",
                            "doc": "Whether attached world morph should replicate entity\u0027s rotation (i.e. copy head rotation)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players that see this entity (including themselves)\n toggleable following rotation and rotation offsets.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\u0027{Name:\"item\"}\u0027);\n\n    s.displayMorph(morph, 100, 0, s.getHeight() + 0.5, 0, 180, 0, true);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float",
                            "doc": "Horizontal rotation in degrees."
                        },
                        {
                            "name": "pitch",
                            "type": "float",
                            "doc": "Vertical rotation in degrees."
                        },
                        {
                            "name": "rotate",
                            "type": "boolean",
                            "doc": "Whether attached world morph should replicate entity\u0027s rotation (i.e. copy head rotation)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to given player that sees this entity\n toggleable following rotation and rotation offsets.\n\n \u003cpre\u003e{@code\n    // Show this morph only to Notch\n    var s \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\u0027{Name:\"item\"}\u0027);\n\n    s.displayMorph(morph, 100, 0, s.getHeight() + 0.5, 0, 180, 0, true, c.getServer().getPlayer(\"Notch\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float",
                            "doc": "Horizontal rotation in degrees."
                        },
                        {
                            "name": "pitch",
                            "type": "float",
                            "doc": "Vertical rotation in degrees."
                        },
                        {
                            "name": "rotate",
                            "type": "boolean",
                            "doc": "Whether attached world morph should replicate entity\u0027s rotation (i.e. copy head rotation)."
                        },
                        {
                            "name": "player",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer",
                            "doc": "The player that only should see the morph, or null for everyone."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "shootBBGunProjectile",
                    "doc": "Spawn a BB gun projectile. It works only if Blockbuster mod is present.\n\n \u003cp\u003eProTip: To get the gun props\u0027 NBT code, configure a desired BB gun, and grab it into\n you main hand. Execute \u003ccode\u003e/item_nbt false\u003c/code\u003e command in the chat, paste the NBT\n into the script, and remove {Gun: in the beginning and a } in the end.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n     c.getSubject().shootBBGunProjectile(\u0027{Gun:{Damage:1.0f,Projectile:{Meta:0b,Block:\"minecraft:stone\",Name:\"block\"},Gravity:0.0f}}\u0027)\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "gunPropsNBT",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "executeCommand",
                    "doc": "Executes a command as a entity.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.getSubject().executeCommand(\"/kill\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "command",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "executeScript",
                    "doc": "Execute for the entity a script with a given script name\n and the default function \"main\".\n\n \u003cpre\u003e{@code\n    c.getSubject().executeScript(\"example_script.js\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "The name of the script to execute."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "executeScript",
                    "doc": "Execute for the entity a script with a given script name.\n\n\u003c pre\u003e{@code\n    c.getSubject().executeScript(\"example_script.js\", \"custom_function\");",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "function",
                            "type": "java.lang.String",
                            "doc": "The name of the function within the script to execute.\n }\u003c/pre\u003e"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "lockPosition",
                    "doc": "Lock the entity\u0027s position.\n\n \u003cpre\u003e{@code\n var s \u003d c.getSubject();\n var pos \u003d s.getPosition();\n s.lockPosition(pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double",
                            "doc": "X position"
                        },
                        {
                            "name": "y",
                            "type": "double",
                            "doc": "Y position"
                        },
                        {
                            "name": "z",
                            "type": "double",
                            "doc": "Z position"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "unlockPosition",
                    "doc": "Unlock the entity\u0027s position.\n\n \u003cpre\u003e{@code\n    c.getSubject().unlockPosition();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isPositionLocked",
                    "doc": "Check if the entity\u0027s position is locked.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().isPositionLocked())\n    {\n        // Do something\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "lockRotation",
                    "doc": "Lock the entity\u0027s rotation.\n\n \u003cpre\u003e{@code\n var s \u003d c.getSubject();\n var rot \u003d s.getRotation();\n s.lockRotation(rot.x, rot.y, rot.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "pitch",
                            "type": "float",
                            "doc": "Pitch rotation"
                        },
                        {
                            "name": "yaw",
                            "type": "float",
                            "doc": "Yaw rotation"
                        },
                        {
                            "name": "yawHead",
                            "type": "float",
                            "doc": "Yaw rotation of the head"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "unlockRotation",
                    "doc": "Unlock the entity\u0027s rotation.\n\n \u003cpre\u003e{@code\n    c.getSubject().unlockRotation();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isRotationLocked",
                    "doc": "Check if the entity\u0027s rotation is locked.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().isRotationLocked())\n    {\n        // Do something\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "moveTo",
                    "doc": "\u003cp\u003eMoves the entity to the specified position (\u003cb\u003ex, y, z\u003c/b\u003e)\n with the given \u003cb\u003einterpolation type\u003c/b\u003e and \u003cb\u003eduration\u003c/b\u003e.\n The following interpolation types are supported:\u003c/p\u003e\n \u003cul\u003e\n     §7\u003cli\u003elinear\u003c/li\u003e§r\n     §7\u003cli\u003equad_in\u003c/li\u003e§r\n     §7\u003cli\u003equad_out\u003c/li\u003e§r\n     §7\u003cli\u003equad_inout\u003c/li\u003e§r\n     §7\u003cli\u003ecubic_in\u003c/li\u003e§r\n     §7\u003cli\u003ecubic_out\u003c/li\u003e§r\n     §7\u003cli\u003ecubic_inout\u003c/li\u003e§r\n     §7\u003cli\u003eexp_in\u003c/li\u003e§r\n     §7\u003cli\u003eexp_out\u003c/li\u003e§r\n     §7\u003cli\u003eexp_inout\u003c/li\u003e§r\n     §7\u003cli\u003eback_in\u003c/li\u003e§r\n     §7\u003cli\u003eback_out\u003c/li\u003e§r\n     §7\u003cli\u003eback_inout\u003c/li\u003e§r\n     §7\u003cli\u003eelastic_in\u003c/li\u003e§r\n     §7\u003cli\u003eelastic_out\u003c/li\u003e§r\n     §7\u003cli\u003eelastic_inout\u003c/li\u003e§r\n     §7\u003cli\u003ebounce_in\u003c/li\u003e§r\n     §7\u003cli\u003ebounce_out\u003c/li\u003e§r\n     §7\u003cli\u003ebounce_inout\u003c/li\u003e§r\n     §7\u003cli\u003esine_in\u003c/li\u003e§r\n     §7\u003cli\u003esine_out\u003c/li\u003e§r\n     §7\u003cli\u003esine_inout\u003c/li\u003e§r\n     §7\u003cli\u003equart_in\u003c/li\u003e§r\n     §7\u003cli\u003equart_out\u003c/li\u003e§r\n     §7\u003cli\u003equart_inout\u003c/li\u003e§r\n     §7\u003cli\u003equint_in\u003c/li\u003e§r\n     §7\u003cli\u003equint_out\u003c/li\u003e§r\n \u003c/ul\u003e\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var pos \u003d s.getPosition();\n    s.moveTo(\"quad_out\", 30, pos.x, pos.y+2, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "interpolation",
                            "type": "java.lang.String",
                            "doc": "The interpolation type used for the movement."
                        },
                        {
                            "name": "durationTicks",
                            "type": "int",
                            "doc": "The duration of the movement in ticks."
                        },
                        {
                            "name": "x",
                            "type": "double",
                            "doc": "The target x-coordinate for the entity."
                        },
                        {
                            "name": "y",
                            "type": "double",
                            "doc": "The target y-coordinate for the entity."
                        },
                        {
                            "name": "z",
                            "type": "double",
                            "doc": "The target z-coordinate for the entity."
                        },
                        {
                            "name": "disableAI",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "observe",
                    "doc": "Makes the entity observe the given entity.\n\n \u003cpre\u003e{@code\n    c.getSubject().observe(null); //to stop observing\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "entity",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity",
                            "doc": "The entity to observe"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addEntityPatrol",
                    "doc": "Adds a patrol point to the entity\n\n \u003cpre\u003e{@code\n     var s \u003d c.getSubject();\n     s.addEntityPatrol(440, 117, 640, 1, true, \"particle heart ~ ~1 ~ 0.2 0.2 0.2 1\")\n     s.addEntityPatrol(444, 117, 640, 1, true, \"particle angryVillager ~ ~1 ~ 0.2 0.2 0.2 1\")\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double",
                            "doc": "x coordinate"
                        },
                        {
                            "name": "y",
                            "type": "double",
                            "doc": "y coordinate"
                        },
                        {
                            "name": "z",
                            "type": "double",
                            "doc": "z coordinate"
                        },
                        {
                            "name": "speed",
                            "type": "double",
                            "doc": "speed of the entity"
                        },
                        {
                            "name": "shouldCirculate",
                            "type": "boolean",
                            "doc": "should the entity patrol the points in a loop"
                        },
                        {
                            "name": "executeCommandOnArrival",
                            "type": "java.lang.String",
                            "doc": "command to execute when the entity arrives at the point"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearEntityPatrols",
                    "doc": "Clears all patrol points from the entity\n\n \u003cpre\u003e{@code\n c.getSubject().clearEntityPatrols();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setRotationsAI",
                    "doc": "Sets the entity\u0027s AI to look with specific rotations\n\n \u003cpre\u003e{@code\n     c.getSubject().setRotationsAI(0, 90, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "yaw",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        },
                        {
                            "name": "yawHead",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearRotationsAI",
                    "doc": "Clears the entity\u0027s AI rotations\n\n \u003cpre\u003e{@code\n     c.getSubject().clearRotationsAI();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "executeRepeatingCommand",
                    "doc": "Executes a command at a specific frequency on an entity.\n\n \u003cpre\u003e{@code\n    c.getSubject().executeRepeatingCommand(\"/tp @s ~ ~2 ~\", 20);",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "command",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "frequency",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "removeRepeatingCommand",
                    "doc": "Removes a repeating command from an entity.\n\n \u003cpre\u003e{@code\n    c.getSubject().removeRepeatingCommand(\"/tp @s ~ ~2 ~\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "command",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearAllRepeatingCommands",
                    "doc": "Clears all the repeating commands of an entity.\n\n \u003cpre\u003e{@code\n    c.getSubject().clearAllRepeatingCommands();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.IScriptWorld",
            "doc": "This interface represent a world passed in the event.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var world \u003d c.getWorld();\n\n        // Do something with world...\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftWorld",
                    "doc": "Get Minecraft world instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "World"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setBlock",
                    "doc": "Set a block at XYZ, use {@link IScriptFactory#createBlockState(String, int)}\n to get the block state.\n\n \u003cpre\u003e{@code\n    var coarse_dirt \u003d mappet.createBlockState(\"minecraft:dirt\", 1);\n\n    c.getWorld().setBlock(coarse_dirt, 214, 3, 509);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getBlock",
                    "doc": "Get block state at given XYZ.\n\n \u003cpre\u003e{@code\n    var block \u003d c.getWorld().getBlock(214, 3, 509);\n\n    c.send(\"Block at (214, 3, 509) is \" + block.getBlockId());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState",
                        "doc": "a block state at given XYZ, or null if the chunk isn\u0027t loaded"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "hasTileEntity",
                    "doc": "Whether a tile entity is present at given XYZ.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getTileEntity",
                    "doc": "Get tile entity at given XYZ.\n\n \u003cpre\u003e{@code\n    var tile \u003d c.getWorld().getBlock(214, 3, 509);\n\n    if (tile)\n    {\n        c.send(\"Tile entity at (214, 3, 509) is \" + tile.getId());\n    }\n    else\n    {\n        c.send(\"There is no tile entity at (214, 3, 509)\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.blocks.IScriptTileEntity"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "hasInventory",
                    "doc": "Check whether there is an inventory tile entity at given XYZ.\n\n \u003cpre\u003e{@code\n    var world \u003d c.getWorld();\n\n    if (world.hasInventory(214, 4, 512))\n    {\n        var inventory \u003d world.getInventory(214, 4, 512);\n\n        inventory.setStack(0, mappet.createItem(\"minecraft:diamond_hoe\"));\n        c.send(\"There is a surprise for you in chest at (214, 4, 512) :)\");\n    }\n    else\n    {\n        c.send(\"There is no chest at (214, 4, 512)...\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getInventory",
                    "doc": "Get inventory tile entity at given XYZ.\n\n \u003cpre\u003e{@code\n    var world \u003d c.getWorld();\n    var inventory \u003d world.getInventory(214, 4, 512);\n\n    if (world.hasInventory(214, 4, 512))\n    {\n        var inventory \u003d world.getInventory(214, 4, 512);\n\n        inventory.clear();\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptInventory",
                        "doc": "an inventory at given XYZ, or \u003ccode\u003enull\u003c/code\u003e if an inventory tile entity isn\u0027t present."
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isRaining",
                    "doc": "Check whether it\u0027s raining in the world.\n\n \u003cpre\u003e{@code\n    var world \u003d c.getWorld();\n    var pos \u003d c.getSubject().getPosition();\n\n    // If it\u0027s raining in the world, then drop a diamond\n    // If not, then drop a dirt block\n    if (world.isRaining())\n    {\n        world.dropItemStack(mappet.createItem(\"minecraft:diamond\"), pos.x, pos.y + 3, pos.z);\n    }\n    else\n    {\n        world.dropItemStack(mappet.createItem(\"minecraft:dirt\"), pos.x, pos.y + 3, pos.z);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setRaining",
                    "doc": "Set raining state.\n\n \u003cpre\u003e{@code\n    c.getWorld().setRaining(true);\n    c.send(\"The ritual dance got successfully completed!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "raining",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getTime",
                    "doc": "Get current time of day (the one that is set by \u003ccode\u003e/time set\u003c/code\u003e command).\n\n \u003cpre\u003e{@code\n    if (c.getWorld().getTime() % 24000 \u003e 12000)\n    {\n        c.getSubject().send(\"Good night!\");\n    }\n    else\n    {\n        c.getSubject().send(\"Good day!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "long"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setTime",
                    "doc": "Set current time of day.\n\n \u003cpre\u003e{@code\n    c.getWorld().setTime(14000);\n    c.send(\"Another ritual dance got successfully completed!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "time",
                            "type": "long"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getTotalTime",
                    "doc": "Get total time that this world existed for (in ticks).\n\n \u003cpre\u003e{@code\n    if (c.getWorld().getTotalTime() \u003e 20 * 600)\n    {\n        c.send(\"You had only 10 minutes to complete the map...\");\n        c.send(\"Initiating SELF-DESTRUCT mode!\");\n\n        // TODO: implement self-destruction\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "long"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getDimensionId",
                    "doc": "Get world\u0027s dimension ID.\n\n \u003cpre\u003e{@code\n    if (c.getWorld().getDimensionId() \u003d\u003d 0)\n    {\n        c.getSubject().send(\"You\u0027re in overworld!\");\n    }\n    else\n    {\n        c.getSubject().send(\"*shrugs*\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "spawnParticles",
                    "doc": "Spawn vanilla particles.\n\n \u003cpre\u003e{@code\n    var explode \u003d mappet.getParticleType(\"explode\");\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().spawnParticles(explode, false, pos.x, pos.y, pos.z, 10, 0.1, 0.1, 0.1, 0.1);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "type",
                            "type": "EnumParticleTypes",
                            "doc": "Particle type, you can use {@link IScriptFactory#getParticleType(String)}\n                     to get the desired particle type."
                        },
                        {
                            "name": "longDistance",
                            "type": "boolean",
                            "doc": "Whether particles should be spawned regardless of the distance"
                        },
                        {
                            "name": "x",
                            "type": "double",
                            "doc": "X coordinate of position where particles should be spawned"
                        },
                        {
                            "name": "y",
                            "type": "double",
                            "doc": "Y coordinate of position where particles should be spawned"
                        },
                        {
                            "name": "z",
                            "type": "double",
                            "doc": "Z coordinate of position where particles should be spawned"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "doc": "How many particles of given type should be spawned"
                        },
                        {
                            "name": "dx",
                            "type": "double",
                            "doc": "X random offset that shift particle relative to X coordinate where it spawned"
                        },
                        {
                            "name": "dy",
                            "type": "double",
                            "doc": "Y random offset that shift particle relative to Y coordinate where it spawned"
                        },
                        {
                            "name": "dz",
                            "type": "double",
                            "doc": "Z random offset that shift particle relative to Z coordinate where it spawned"
                        },
                        {
                            "name": "speed",
                            "type": "double",
                            "doc": "The speed of particle, different particles might use this argument differently"
                        },
                        {
                            "name": "args",
                            "type": "int",
                            "doc": "Additional arguments that can be passed into a particle, for example for\n                     \"iconcrack\" particle you can pass item numeric ID to spawn item particle for\n                     a specific item (F3 + H shows the numeric ID of an item)"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnParticles",
                    "doc": "Spawn vanilla particles only to a specific player.\n\n \u003cpre\u003e{@code\n    var explode \u003d mappet.getParticleType(\"explode\");\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().spawnParticles(c.getSubject(), explode, false, pos.x, pos.y, pos.z, 10, 0.1, 0.1, 0.1, 0.1);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "player",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer",
                            "doc": "The player that you want to limit seeing the particle only to"
                        },
                        {
                            "name": "type",
                            "type": "EnumParticleTypes",
                            "doc": "Particle type, you can use {@link IScriptFactory#getParticleType(String)}\n                     to get the desired particle type."
                        },
                        {
                            "name": "longDistance",
                            "type": "boolean",
                            "doc": "Whether particles should be spawned regardless of the distance"
                        },
                        {
                            "name": "x",
                            "type": "double",
                            "doc": "X coordinate of position where particles should be spawned"
                        },
                        {
                            "name": "y",
                            "type": "double",
                            "doc": "Y coordinate of position where particles should be spawned"
                        },
                        {
                            "name": "z",
                            "type": "double",
                            "doc": "Z coordinate of position where particles should be spawned"
                        },
                        {
                            "name": "n",
                            "type": "int",
                            "doc": "How many particles of given type should be spawned"
                        },
                        {
                            "name": "dx",
                            "type": "double",
                            "doc": "X random offset that shift particle relative to X coordinate where it spawned"
                        },
                        {
                            "name": "dy",
                            "type": "double",
                            "doc": "Y random offset that shift particle relative to Y coordinate where it spawned"
                        },
                        {
                            "name": "dz",
                            "type": "double",
                            "doc": "Z random offset that shift particle relative to Z coordinate where it spawned"
                        },
                        {
                            "name": "speed",
                            "type": "double",
                            "doc": "The speed of particle, different particles might use this argument differently"
                        },
                        {
                            "name": "args",
                            "type": "int",
                            "doc": "Additional arguments that can be passed into a particle, for example for\n                     \"iconcrack\" particle you can pass item numeric ID to spawn item particle for\n                     a specific item (F3 + H shows the numeric ID of an item)"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnEntity",
                    "doc": "Spawn an entity at given position.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    // Make an explosion at player\u0027s feet\n    c.getWorld().spawnEntity(\"minecraft:tnt\", pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnEntity",
                    "doc": "Spawn an entity at given position with additional data.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    // Spawn a baby zombie\n    c.getWorld().spawnEntity(\"minecraft:zombie\", pos.x, pos.y + 3, pos.z, mappet.createCompound(\"{IsBaby:1b}\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "compound",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnNpc",
                    "doc": "Spawn an NPC at given position with default state.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().spawnNpc(\"herobrine\", pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptNpc"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnNpc",
                    "doc": "Spawn an NPC at given position with given state.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().spawnNpc(\"herobrine\", \"dabbing\", pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptNpc"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "state",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnNpc",
                    "doc": "Spawn an NPC at given position with given state and rotation.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().spawnNpc(\"herobrine\", \"dabbing\", pos.x, pos.y, pos.z, 0, 0, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptNpc"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "state",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        },
                        {
                            "name": "headYaw",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getEntities",
                    "doc": "Get entities within the box specified by given coordinates in this world.\n This method limits to scanning entities only within \u003cb\u003e100 blocks\u003c/b\u003e\n in any direction. If the box provided has any of its sizes that is longer\n than 100 blocks, then it will simply return an empty list.\n\n \u003cpre\u003e{@code\n    // Y position is at the feet, while X and Z is at center\n    var pos \u003d c.getSubject().getPosition();\n    var entities \u003d c.getWorld().getEntities(pos.x - 2, pos.y - 1, pos.z - 2, pos.x + 2, pos.y + 3, pos.z + 2);\n\n    for (var i in entities)\n    {\n        var entity \u003d entities[i];\n\n        if (!entity.isSame(c.getSubject()))\n        {\n            entity.damage(2.0);\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "double"
                        },
                        {
                            "name": "y1",
                            "type": "double"
                        },
                        {
                            "name": "z1",
                            "type": "double"
                        },
                        {
                            "name": "x2",
                            "type": "double"
                        },
                        {
                            "name": "y2",
                            "type": "double"
                        },
                        {
                            "name": "z2",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getEntities",
                    "doc": "Get entities within the sphere specified by given coordinates and radius in\n this world. This method limits to scanning entities only within \u003cb\u003e50 blocks\n radius\u003c/b\u003e in any direction. If the sphere provided has the radius that is\n longer than 100 blocks, then it will simply return an empty list.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n    var entities \u003d c.getWorld().getEntities(pos.x, pos.y + 1, pos.z, 3);\n\n    for (var i in entities)\n    {\n        var entity \u003d entities[i];\n\n        if (!entity.isSame(c.getSubject()))\n        {\n            entity.damage(2.0);\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "radius",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playSound",
                    "doc": "Play a sound event in the world.\n\n \u003cp\u003eFor all possible sound event IDs, please refer to either \u003ccode\u003e/playsound\u003c/code\u003e\n command, or script editor\u0027s sound picker.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().playSound(\"minecraft:entity.pig.ambient\", pos.x, pos.y, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "playSound",
                    "doc": "Play a sound event in the world with volume and pitch.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().playSound(\"minecraft:entity.pig.ambient\", pos.x, pos.y, pos.z, 1.0, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stopAllSounds",
                    "doc": "Stop all playing sound events for every player.\n\n \u003cpre\u003e{@code\n    c.getWorld().stopAllSounds();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "stopSound",
                    "doc": "Stop specific sound event for every player.\n\n \u003cpre\u003e{@code\n    c.getWorld().stopSound(\"minecraft:entity.pig.ambient\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stopSound",
                    "doc": "\u003cp\u003eStop specific sound event in given sound category for every player.\u003c/p\u003e\n\n \u003cp\u003eFor list of sound categories, type into chat\n \u003ccode\u003e/playsound minecraft:entity.pig.ambient\u003c/code\u003e, press space, and press\n Tab key. The list of sounds categories will be displayed.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    c.getWorld().stopSound(\"minecraft:entity.pig.ambient\", \"master\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "category",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dropItemStack",
                    "doc": "Drop item stack at given XYZ position with no velocity applied.\n\n \u003cpre\u003e{@code\n    var item \u003d mappet.createItem(\"minecraft:diamond_hoe\");\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().dropItemStack(item, pos.x, pos.y + 3, pos.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dropItemStack",
                    "doc": "Drop an item stack at given XYZ position in this world with desired velocity.\n\n \u003cpre\u003e{@code\n    var item \u003d mappet.createItem(\"minecraft:diamond_hoe\");\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().dropItemStack(item, pos.x, pos.y + 3, pos.z, 0, 1, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "mx",
                            "type": "double"
                        },
                        {
                            "name": "my",
                            "type": "double"
                        },
                        {
                            "name": "mz",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "explode",
                    "doc": "Make an explosion in this world at given coordinates, and distance that\n destroys blocks, damages entities but not places fire. See {@link IScriptWorld#explode(IScriptEntity, double, double, double, float, boolean, boolean)}\n for more thorough definition of arguments.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "distance",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "explode",
                    "doc": "Make an explosion in this world at given coordinates, and distance with\n options to place fire and destroy blocks. See {@link IScriptWorld#explode(IScriptEntity, double, double, double, float, boolean, boolean)}\n for more thorough definition of arguments.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "distance",
                            "type": "float"
                        },
                        {
                            "name": "blazeGround",
                            "type": "boolean"
                        },
                        {
                            "name": "destroyTerrain",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "explode",
                    "doc": "Make an explosion in this world at given coordinates, distance, and entity\n that caused the explosion.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "exploder",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity",
                            "doc": "Entity that causes explosion that won\u0027t receive damage from it."
                        },
                        {
                            "name": "x",
                            "type": "double",
                            "doc": "X coordinate in the world at which explosion must be caused."
                        },
                        {
                            "name": "y",
                            "type": "double",
                            "doc": "Y coordinate in the world at which explosion must be caused."
                        },
                        {
                            "name": "z",
                            "type": "double",
                            "doc": "Z coordinate in the world at which explosion must be caused."
                        },
                        {
                            "name": "distance",
                            "type": "float",
                            "doc": "Radius (in blocks of the explosion)."
                        },
                        {
                            "name": "blazeGround",
                            "type": "boolean",
                            "doc": "Whether fire blocks should be placed randomly on top of remaining blocks."
                        },
                        {
                            "name": "destroyTerrain",
                            "type": "boolean",
                            "doc": "Whether blocks should be destroyed by the explosion."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rayTrace",
                    "doc": "Ray trace in this world, between two given points (including any entity intersection).\n Check {@link IScriptRayTrace} for an example.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptRayTrace"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "double",
                            "doc": "X coordinate of the first point."
                        },
                        {
                            "name": "y1",
                            "type": "double",
                            "doc": "Y coordinate of the first point."
                        },
                        {
                            "name": "z1",
                            "type": "double",
                            "doc": "Z coordinate of the first point."
                        },
                        {
                            "name": "x2",
                            "type": "double",
                            "doc": "X coordinate of the second point."
                        },
                        {
                            "name": "y2",
                            "type": "double",
                            "doc": "Y coordinate of the second point."
                        },
                        {
                            "name": "z2",
                            "type": "double",
                            "doc": "Z coordinate of the second point."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rayTraceBlock",
                    "doc": "Ray trace in this world, between two given points (excluding entities).\n Check {@link IScriptRayTrace} for an example.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptRayTrace"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "double",
                            "doc": "X coordinate of the first point."
                        },
                        {
                            "name": "y1",
                            "type": "double",
                            "doc": "Y coordinate of the first point."
                        },
                        {
                            "name": "z1",
                            "type": "double",
                            "doc": "Z coordinate of the first point."
                        },
                        {
                            "name": "x2",
                            "type": "double",
                            "doc": "X coordinate of the second point."
                        },
                        {
                            "name": "y2",
                            "type": "double",
                            "doc": "Y coordinate of the second point."
                        },
                        {
                            "name": "z2",
                            "type": "double",
                            "doc": "Z coordinate of the second point."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setModelBlockMorph",
                    "doc": "Set morph (from NBT) to a model block at given position in this world.\n It only works when Blockbuster mod is installed.\n\n \u003cpre\u003e{@code\n     function main(c)\n     {\n         var pos \u003d c.getSubject().getPosition()\n         var nbt \u003d \u0027{Settings:{Hands:1b},Name:\"blockbuster.fred\"}\u0027;\n\n         c.getWorld().setModelBlock(nbt, pos.x, pos.y, pos.z, true);\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "java.lang.String",
                            "doc": "NBT of a morph to be replaced for given model block."
                        },
                        {
                            "name": "x",
                            "type": "int",
                            "doc": "X coordinate of a model block."
                        },
                        {
                            "name": "y",
                            "type": "int",
                            "doc": "Y coordinate of a model block."
                        },
                        {
                            "name": "z",
                            "type": "int",
                            "doc": "Z coordinate of a model block."
                        },
                        {
                            "name": "force",
                            "type": "boolean",
                            "doc": "Force update model block to update the morph even if the morph is same."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isActive",
                    "doc": "Return whether a button, plate or lever is active or not.\n\n \u003cpre\u003e{@code\n     c.getWorld().isActive(0, 4, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "testForBlock",
                    "doc": "Test for a specific block and meta in a specific coordinates.\n\n \u003cpre\u003e{@code\n     function main(c)\n     {\n         var pos \u003d c.getSubject().getPosition()\n\n         if (c.getWorld().testForBlock(Math.floor(pos.x), Math.floor(pos.y), Math.floor(pos.z), \"minecraft:light_weighted_pressure_plate\", 1))\n         {\n             c.send(\"Prussure Plate is pressed.\")\n         }\n     }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "blockId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "meta",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "fill",
                    "doc": "Fill a 3D area with a block.\n\n \u003cpre\u003e{@code\n     var coarse_dirt \u003d mappet.createBlockState(\"minecraft:dirt\", 1);\n\n     c.getWorld().fill(coarse_dirt, -3, 100, -3, 3, 100, 3);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState",
                            "doc": "The block to fill the area with."
                        },
                        {
                            "name": "x1",
                            "type": "int",
                            "doc": "The first x coordinate."
                        },
                        {
                            "name": "y1",
                            "type": "int",
                            "doc": "The first y coordinate."
                        },
                        {
                            "name": "z1",
                            "type": "int",
                            "doc": "The first z coordinate."
                        },
                        {
                            "name": "x2",
                            "type": "int",
                            "doc": "The second x coordinate."
                        },
                        {
                            "name": "y2",
                            "type": "int",
                            "doc": "The second y coordinate."
                        },
                        {
                            "name": "z2",
                            "type": "int",
                            "doc": "The second z coordinate."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "summonFallingBlock",
                    "doc": "Summon a falling block with a specific block id and meta.\n\n \u003cpre\u003e{@code\n     c.getWorld().summonFallingBlock(0, 100, 0, \"minecraft:dirt\", 1);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity",
                        "doc": "The falling block entity."
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "blockId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "meta",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setFallingBlock",
                    "doc": "Transform a block to a falling block in specific coordinates.\n\n \u003cpre\u003e{@code\n     c.getWorld().setFallingBlock(0, 100, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity",
                        "doc": "The falling block entity."
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setTileEntity",
                    "doc": "Sets a tile entity.\n\n \u003cpre\u003e{@code\n c.getWorld().setTileEntity(530, 152, 546, mappet.createBlockState(\"blockbuster:model\", 0),mappet.createCompound(\u0027{,Morph:{Settings:{Hands:1b},Name:\"blockbuster.fred\"},id:\"minecraft:blockbuster_model_tile_entity\"}\u0027);\n   }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int",
                            "doc": "X coordinate"
                        },
                        {
                            "name": "y",
                            "type": "int",
                            "doc": "Y coordinate"
                        },
                        {
                            "name": "z",
                            "type": "int",
                            "doc": "Z coordinate"
                        },
                        {
                            "name": "blockState",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "tileData",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "fillTileEntities",
                    "doc": "Fills a range with tile entities.\n\n \u003cpre\u003e{@code\n c.getWorld().fillTileEntities(530, 152, 546, mappet.createBlockState(\"blockbuster:model\", 0),mappet.createCompound(\u0027{,Morph:{Settings:{Hands:1b},Name:\"blockbuster.fred\"},id:\"minecraft:blockbuster_model_tile_entity\"}\u0027);\n   }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "int",
                            "doc": "X coordinate"
                        },
                        {
                            "name": "y1",
                            "type": "int",
                            "doc": "Y coordinate"
                        },
                        {
                            "name": "z1",
                            "type": "int",
                            "doc": "Z coordinate"
                        },
                        {
                            "name": "x2",
                            "type": "int",
                            "doc": "X coordinate"
                        },
                        {
                            "name": "y2",
                            "type": "int",
                            "doc": "Y coordinate"
                        },
                        {
                            "name": "z2",
                            "type": "int",
                            "doc": "Z coordinate"
                        },
                        {
                            "name": "blockState",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "tileData",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clone",
                    "doc": "Clones am area to another area.\n\n \u003cpre\u003e{@code\n c.getWorld().clone(0, 100, 0, 3, 100, 3, 0, 101, 0, false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "int",
                            "doc": "The first x coordinate."
                        },
                        {
                            "name": "y1",
                            "type": "int",
                            "doc": "The first y coordinate."
                        },
                        {
                            "name": "z1",
                            "type": "int",
                            "doc": "The first z coordinate."
                        },
                        {
                            "name": "x2",
                            "type": "int",
                            "doc": "The second x coordinate."
                        },
                        {
                            "name": "y2",
                            "type": "int",
                            "doc": "The second y coordinate."
                        },
                        {
                            "name": "z2",
                            "type": "int",
                            "doc": "The second z coordinate."
                        },
                        {
                            "name": "xNew",
                            "type": "int",
                            "doc": "The new x coordinate."
                        },
                        {
                            "name": "yNew",
                            "type": "int",
                            "doc": "The new y coordinate."
                        },
                        {
                            "name": "zNew",
                            "type": "int",
                            "doc": "The new z coordinate."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clone",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "xNew",
                            "type": "int"
                        },
                        {
                            "name": "yNew",
                            "type": "int"
                        },
                        {
                            "name": "zNew",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "saveSchematic",
                    "doc": "Saves a schematic file in the world\u0027s schematics folder in world/mappet/schematics.\n\n \u003cpre\u003e{@code\n c.getWorld().saveSchematic(\"my_schematic\", 0, 100, 0, 3, 100, 3);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "name",
                            "type": "java.lang.String",
                            "doc": "The name of the schematic."
                        },
                        {
                            "name": "x1",
                            "type": "int",
                            "doc": "The first x coordinate."
                        },
                        {
                            "name": "y1",
                            "type": "int",
                            "doc": "The first y coordinate."
                        },
                        {
                            "name": "z1",
                            "type": "int",
                            "doc": "The first z coordinate."
                        },
                        {
                            "name": "x2",
                            "type": "int",
                            "doc": "The second x coordinate."
                        },
                        {
                            "name": "y2",
                            "type": "int",
                            "doc": "The second y coordinate."
                        },
                        {
                            "name": "z2",
                            "type": "int",
                            "doc": "The second z coordinate."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "loadSchematic",
                    "doc": "Loads a schematic file from the world\u0027s schematics folder in world/mappet/schematics.\n\n \u003cpre\u003e{@code\n c.getWorld().loadSchematic(\"my_schematic\", 0, 100, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "name",
                            "type": "java.lang.String",
                            "doc": "The name of the schematic."
                        },
                        {
                            "name": "x",
                            "type": "int",
                            "doc": "The x coordinate."
                        },
                        {
                            "name": "y",
                            "type": "int",
                            "doc": "The y coordinate."
                        },
                        {
                            "name": "z",
                            "type": "int",
                            "doc": "The z coordinate."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "serializeSchematic",
                    "doc": "Serialize a schematic into a NBT compound.\n\n \u003cpre\u003e{@code\n   var nbt \u003d c.getWorld().serializeSchematic(schematic);\n   }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound",
                        "doc": "NBT compound"
                    },
                    "arguments": [
                        {
                            "name": "name",
                            "type": "java.lang.String",
                            "doc": "Schematic name"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getBlockStackWithTile",
                    "doc": "Gets the block stack at given position, including tile entity data.\n\n \u003cpre\u003e{@code\n    var x\u003d 0, y \u003d 100, z \u003d 0;\n    var world \u003d c.getWorld();\n    var blockItemStack \u003d world.getBlockStackWithTile(x, y, z);\n    world.setBlock(mappet.createBlockState(\"minecraft:air\", 0), x, y, z)\n    world.dropItemStack(blockItemStack, x+0.5, y+0.5, z+0.5);",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "shootBBGunProjectile",
                    "doc": "Shoots a gun projectile entity.\n\n \u003cpre\u003e{@code\n     var projectile \u003d c.getWorld().shootBBGunProjectile(c.getSubject(), 547, 160, 497, 0, -90, \u0027{Gun:{TickCommand:\"particle heart ~ ~1 ~ 0.2 0.2 0.2 1\",StoredAmmo:0,Ticking:1,Damage:1.0f,Projectile:{Meta:0b,Block:\"minecraft:stone\",Name:\"block\"},Gravity:0.0f}}\u0027)\n     c.scheduleScript(20, function (c){\n         projectile.executeCommand(\"summon tnt ~ ~ ~\")\n         projectile.remove()\n     });\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "shooter",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "double"
                        },
                        {
                            "name": "pitch",
                            "type": "double"
                        },
                        {
                            "name": "gunPropsNbtString",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players around 64 blocks away from given point.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        },
                        {
                            "name": "expiration",
                            "type": "int"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players at given point.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\u0027{Name:\"item\"}\u0027);\n    var pos \u003d s.getPosition();\n\n    // This will display a diamond hoe morph on top of the\n    // player\u0027s head (but it won\u0027t track player\u0027s movement)\n    c.getWorld().displayMorph(morph, 100, pos.x, pos.y + s.getHeight() + 0.5, pos.z, 64);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "range",
                            "type": "int",
                            "doc": "How many blocks far away will this send to players around given point."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players at given point with rotation.\n\n \u003cpre\u003e{@code\n    var s \u003d c.getSubject();\n    var morph \u003d mappet.createMorph(\u0027{Name:\"item\"}\u0027);\n    var pos \u003d s.getPosition();\n\n    // This will display a diamond hoe morph on top of the\n    // player\u0027s head (but it won\u0027t track player\u0027s movement)\n    // oriented at west\n    c.getWorld().displayMorph(morph, 100, pos.x, pos.y + s.getHeight() + 0.5, pos.z, 90, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float",
                            "doc": "Horizontal rotation in degrees."
                        },
                        {
                            "name": "pitch",
                            "type": "float",
                            "doc": "Vertical rotation in degrees."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players at given point with rotation\n some blocks away in this world.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float",
                            "doc": "Horizontal rotation in degrees."
                        },
                        {
                            "name": "pitch",
                            "type": "float",
                            "doc": "Vertical rotation in degrees."
                        },
                        {
                            "name": "range",
                            "type": "int",
                            "doc": "How many blocks far away will this send to players around given point."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "displayMorph",
                    "doc": "Display a world morph to all players at given point with rotation\n some blocks away in this world only to given player.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph",
                            "doc": "Morph that will be displayed (if \u003ccode\u003enull\u003c/code\u003e, then it won\u0027t send anything)."
                        },
                        {
                            "name": "expiration",
                            "type": "int",
                            "doc": "For how many ticks will this displayed morph exist on the client side."
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float",
                            "doc": "Horizontal rotation in degrees."
                        },
                        {
                            "name": "pitch",
                            "type": "float",
                            "doc": "Vertical rotation in degrees."
                        },
                        {
                            "name": "range",
                            "type": "int",
                            "doc": "How many blocks far away will this send to players around given point."
                        },
                        {
                            "name": "player",
                            "type": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer",
                            "doc": "The player that only should see the morph, or null for everyone."
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.IScriptServer",
            "doc": "This interface represent the server passed in the event.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var server \u003d c.getServer();\n\n        // Do something with server...\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftServer",
                    "doc": "Get Minecraft server instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "MinecraftServer"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getWorld",
                    "doc": "Get world at dimension ID.\n\n \u003cpre\u003e{@code\n    var overworld \u003d c.getServer().getWorld(0);\n\n    // Do something with the world...\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptWorld"
                    },
                    "arguments": [
                        {
                            "name": "dimension",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getFancyWorld",
                    "doc": "Get fancy world at dimension ID.\n\n \u003cpre\u003e{@code\n    var overworld \u003d c.getServer().getFancyWorld(0);\n\n    // Do something with the world...\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptFancyWorld"
                    },
                    "arguments": [
                        {
                            "name": "dimension",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getEntities",
                    "doc": "Get all entities matching giving target selector.\n\n \u003cpre\u003e{@code\n    var cows \u003d c.getServer().getEntities(\"@e[type\u003dminecraft:cow]\");\n\n    // Despawn all cows\n    for (var i in cows)\n    {\n        cows[i].remove();\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [
                        {
                            "name": "targetSelector",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getEntity",
                    "doc": "Get an entity by its UUID.\n\n \u003cpre\u003e{@code\n    var uuid \u003d \"29a91933-86f2-4683-8a87-218084d8c927\";\n    var entity \u003d c.getServer().getEntity(uuid);\n\n    print(entity.getUniqueId() \u003d\u003d\u003d uuid); // true\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [
                        {
                            "name": "uuid",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getAllPlayers",
                    "doc": "Get all players on the server.\n\n \u003cpre\u003e{@code\n    var players \u003d c.getServer().getAllPlayers();\n\n    for (var i in players)\n    {\n        // Surprise :)\n        players[i].setMotion(0, 0.5, 0);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getPlayer",
                    "doc": "Get a player by their username.\n\n \u003cpre\u003e{@code\n    var player \u003d c.getServer().getPlayer(\"Notch\");\n\n    if (player)\n    {\n        // I\u0027m about to pull a prank on Notch... \u003e:)\n        //\n        // Or give a nice present... :)\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer"
                    },
                    "arguments": [
                        {
                            "name": "username",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isOnline",
                    "doc": "Check if a player is online.\n\n \u003cpre\u003e{@code\n    if (!c.getServer().isOnline(\"McHorse\"))\n    {\n        c.send(\"McHorse is not online. :(\")\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "username",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getStates",
                    "doc": "Get global (server) states.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    if (states.getNumber(\"total_money_earned\") \u003e 1000000000)\n    {\n        // Give all players an achievement or something...\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetStates"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "entityExists",
                    "doc": "Check if an entity with given UUID exists.\n\n \u003cpre\u003e{@code\n    if (c.getServer().entityExists(\"29a91933-86f2-4683-8a87-218084d8c927\"))\n    {\n        // Do something...\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "true if an entity with the specified UUID exists, false otherwise."
                    },
                    "arguments": [
                        {
                            "name": "uuid",
                            "type": "java.lang.String",
                            "doc": "The UUID of the entity to check for existence."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "executeScript",
                    "doc": "Execute a script with a given script name and the default function \"main\".\n\n \u003cpre\u003e{@code\n    c.getServer().executeScript(\"example_script.js\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "The name of the script to execute."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "executeScript",
                    "doc": "Execute a script with a given script name and a specified function.\n\n \u003cpre\u003e{@code\n    c.getServer().executeScript(\"example_script.js\", \"custom_function\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "scriptName",
                            "type": "java.lang.String",
                            "doc": "The name of the script to execute."
                        },
                        {
                            "name": "function",
                            "type": "java.lang.String",
                            "doc": "The name of the function within the script to execute."
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.IScriptRayTrace",
            "doc": "This interface represents a ray tracing result.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var result \u003d c.getSubject().rayTrace(32);\n\n        if (result.isBlock())\n        {\n            // Ray hit a block, so we\u0027ll change the block to diamond block\n            var pos \u003d result.getBlock();\n\n            c.getWorld().setBlock(mappet.createBlockState(\"minecraft:diamond_block\", 0), pos.x, pos.y, pos.z);\n        }\n        else if (result.isEntity())\n        {\n            // Ray hit an entity, so we\u0027ll throw it in the air\n            result.getEntity().setMotion(0, 1, 0);\n        }\n        else // if (result.isMissed())\n        {\n            c.send(\"Good luck next time!\");\n        }\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftRayTraceResult",
                    "doc": "Get Minecraft ray trace result. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "RayTraceResult"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isMissed",
                    "doc": "Check whether this ray trace result didn\u0027t capture anything.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isBlock",
                    "doc": "Check whether this ray trace result hit a block.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isEntity",
                    "doc": "Check whether this ray trace result hit an entity.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getEntity",
                    "doc": "Get entity that was captured by this ray trace result (it can be null).",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getBlock",
                    "doc": "Get block position it hit.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.data.ScriptVector"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getHitPosition",
                    "doc": "Get precise position where it hit.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.data.ScriptVector"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.IScriptFancyWorld",
            "doc": "This interface represent a world passed in the event.\n It\u0027s a second interface for fancy functions.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var world \u003d c.getFancyWorld();\n\n        // Do something fancy with world...\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "explode",
                    "doc": "Transforms a block to a falling block in specific coordinates.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().explode(-2, 100, -2, 2, 100, 2, 100);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List",
                        "doc": "The falling block entities in a list."
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "int"
                        },
                        {
                            "name": "y1",
                            "type": "int"
                        },
                        {
                            "name": "z1",
                            "type": "int"
                        },
                        {
                            "name": "x2",
                            "type": "int"
                        },
                        {
                            "name": "y2",
                            "type": "int"
                        },
                        {
                            "name": "z2",
                            "type": "int"
                        },
                        {
                            "name": "blocksPercentage",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "explode",
                    "doc": "Transforms a block to a falling block in specific coordinates.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().explode(0, 100, 0, 3, 100);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List",
                        "doc": "The falling block entities in a list."
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "radius",
                            "type": "int"
                        },
                        {
                            "name": "blocksPercentage",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "tpExplode",
                    "doc": "Explodes the blocks in the range by teleporting them randomly in an explosive way.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().tpExplode(0, 100, 0, 2, 100, 2, 100);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x1",
                            "type": "int"
                        },
                        {
                            "name": "y1",
                            "type": "int"
                        },
                        {
                            "name": "z1",
                            "type": "int"
                        },
                        {
                            "name": "x2",
                            "type": "int"
                        },
                        {
                            "name": "y2",
                            "type": "int"
                        },
                        {
                            "name": "z2",
                            "type": "int"
                        },
                        {
                            "name": "blocksPercentage",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "tpExplode",
                    "doc": "Explodes the blocks in the range by teleporting them randomly in an explosive way.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().tpExplode(0, 100, 0, 3, 100);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "radius",
                            "type": "int"
                        },
                        {
                            "name": "blocksPercentage",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setBlock",
                    "doc": "Sets a block in specific coordinates with a fancy effect.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesAmount",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "fill",
                    "doc": "Sets a block in specific coordinates with a fancy effect.\n\n \u003cpre\u003e{@code\n var block \u003d mappet.createBlockState(\"minecraft:air\", 1);\n c.getFancyWorld().fill(5, block, 539, 151, 548, 555, 160, 570, 1, mappet.getParticleType(\"cloud\"), 2, \"\", 0.3, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "mode",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "x1",
                            "type": "int"
                        },
                        {
                            "name": "y1",
                            "type": "int"
                        },
                        {
                            "name": "z1",
                            "type": "int"
                        },
                        {
                            "name": "x2",
                            "type": "int"
                        },
                        {
                            "name": "y2",
                            "type": "int"
                        },
                        {
                            "name": "z2",
                            "type": "int"
                        },
                        {
                            "name": "delayBetweenLayers",
                            "type": "int"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesPerBlock",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setTileEntity",
                    "doc": "Sets a tile entity in specific block with a fancy effect.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "blockState",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "tileData",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesAmount",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "fillTileEntities",
                    "doc": "Sets a tile entity in specific block with a fancy effect.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "mode",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x1",
                            "type": "int"
                        },
                        {
                            "name": "y1",
                            "type": "int"
                        },
                        {
                            "name": "z1",
                            "type": "int"
                        },
                        {
                            "name": "x2",
                            "type": "int"
                        },
                        {
                            "name": "y2",
                            "type": "int"
                        },
                        {
                            "name": "z2",
                            "type": "int"
                        },
                        {
                            "name": "state",
                            "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                        },
                        {
                            "name": "tileData",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        },
                        {
                            "name": "delayBetweenLayers",
                            "type": "int"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesPerBlock",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clone",
                    "doc": "Clones a block to a specific coordinates with a fancy effect.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "z",
                            "type": "int"
                        },
                        {
                            "name": "xNew",
                            "type": "int"
                        },
                        {
                            "name": "yNew",
                            "type": "int"
                        },
                        {
                            "name": "zNew",
                            "type": "int"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesAmount",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clone",
                    "doc": "Clones a coordinates range to a specific coordinates with a fancy effect.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().clone(2, 527, 150, 549, 536, 155, 545, 527, 160, 549, 20, mappet.getParticleType(\"cloud\"), 20, \"minecraft:block.wood.place\", 0.3, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "mode",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x1",
                            "type": "int"
                        },
                        {
                            "name": "y1",
                            "type": "int"
                        },
                        {
                            "name": "z1",
                            "type": "int"
                        },
                        {
                            "name": "x2",
                            "type": "int"
                        },
                        {
                            "name": "y2",
                            "type": "int"
                        },
                        {
                            "name": "z2",
                            "type": "int"
                        },
                        {
                            "name": "xNew",
                            "type": "int"
                        },
                        {
                            "name": "yNew",
                            "type": "int"
                        },
                        {
                            "name": "zNew",
                            "type": "int"
                        },
                        {
                            "name": "delayBetweenLayers",
                            "type": "int"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesPerBlock",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "loadSchematic",
                    "doc": "Loads a schematic to a specific coordinates with a fancy effect.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().loadSchematic(\"5\", \"my_schematics\", 500, 166, 569, 20, mappet.getParticleType(\"cloud\"), 3, \"minecraft:block.wood.place\", 0.3, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "mode",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "name",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "target_x",
                            "type": "int"
                        },
                        {
                            "name": "target_y",
                            "type": "int"
                        },
                        {
                            "name": "target_z",
                            "type": "int"
                        },
                        {
                            "name": "delayBetweenLayers",
                            "type": "int"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particlesPerBlock",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "spawnNpc",
                    "doc": "Spawns a NPC in specific coordinates with a fancy effect.\n\n \u003cpre\u003e{@code\n c.getFancyWorld().spawnNpc(\"McHorse\", \"default\", 500, 166, 569, 0, 90, 0, mappet.getParticleType(\"cloud\"), 0.1, 20, \"minecraft:entity.zombie.infect\", 0.3, 0.8);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptNpc",
                        "doc": "The spawned NPC."
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "state",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "yaw",
                            "type": "float"
                        },
                        {
                            "name": "pitch",
                            "type": "float"
                        },
                        {
                            "name": "yawHead",
                            "type": "float"
                        },
                        {
                            "name": "particleType",
                            "type": "EnumParticleTypes"
                        },
                        {
                            "name": "particleSpeed",
                            "type": "double"
                        },
                        {
                            "name": "particlesAmount",
                            "type": "int"
                        },
                        {
                            "name": "soundEvent",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "volume",
                            "type": "float"
                        },
                        {
                            "name": "volumePitch",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.IScriptFactory",
            "doc": "Scripting API factory that allows to initialize/create different stuff.\n\n \u003cp\u003eYou can access it in the script as \u003ccode\u003emappet\u003c/code\u003e global variable. Here is a\n code example:\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c) {\n        // Create a diamond hoe using Mappet\u0027s factory\n        var item \u003d mappet.createItem(\"minecraft:diamond_hoe\");\n\n        c.getSubject().setMainItem(item);\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "createBlockState",
                    "doc": "Get a block state that can be used to place and compare blocks in\n the {@link IScriptWorld}.\n\n \u003cpre\u003e{@code\n    var fence \u003d mappet.createBlockState(\"minecraft:fence\", 0);\n\n    // minecraft:fence 0\n    c.send(fence.getBlockId() + \" \" + fence.getMeta());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.blocks.IScriptBlockState"
                    },
                    "arguments": [
                        {
                            "name": "blockId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "meta",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createCompound",
                    "doc": "Create an empty NBT compound.\n\n \u003cpre\u003e{@code\n    var tag \u003d mappet.createCompound();\n\n    tag.setString(\"id\", \"minecraft:diamond_hoe\");\n    tag.setByte(\"Count\", 1);\n\n    var item \u003d mappet.createItemNBT(tag);\n\n    // {id:\"minecraft:diamond_hoe\",Count:1b,Damage:0s}\n    c.send(item.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "createCompound",
                    "doc": "Parse an NBT compound data out of given string, if string NBT was\n invalid then an empty compound will be returned.\n\n \u003cpre\u003e{@code\n    var tag \u003d mappet.createCompound(\"{id:\\\"minecraft:diamond_hoe\\\",Count:1b}\");\n    var item \u003d mappet.createItemNBT(tag);\n\n    // {id:\"minecraft:diamond_hoe\",Count:1b,Damage:0s}\n    c.send(item.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createCompoundFromJS",
                    "doc": "Turn a JS object into an NBT compound.\n\n \u003cp\u003e\u003cb\u003eBEWARE\u003c/b\u003e: when converting JS object to NBT keep in mind some\n limitations of the NBT format:\u003c/p\u003e\n\n \u003cul\u003e\n     \u003cli\u003eNBT supports multiple number storage formats (byte, short, int, long, float,\n     double) so the converter will only be able to convert numbers to either\n     integer or double NBT tags, depending on how did you got the number, \u003ccode\u003e42\u003c/code\u003e\n     being an integer, and \u003ccode\u003e42.0\u003c/code\u003e being a double.\u003c/li\u003e\n     \u003cli\u003eNBT lists support only storage of a \u003cb\u003esingle type\u003c/b\u003e at once, so if you\n     provide an JS array like \u003ccode\u003e[0, 1, 2, \"test\", {a:1,b:2}, 4, [0, 0, 0], 5.5]\u003c/code\u003e\n     then \u003cb\u003eonly the the first element\u0027s\u003c/b\u003e type will be taken in account, and the\n     resulted NBT list will turn out like \u003ccode\u003e[0.0d, 1.0d, 2.0d, 4.0d, 5.5d]\u003c/code\u003e.\n     \u003cb\u003eIn case with numbers\u003c/b\u003e if you had first integers, and somewhere in the\n     middle in the list you got a double, then the integer type \u003cb\u003ewill get converted\n     to double\u003c/b\u003e!\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cpre\u003e{@code\n    var tag \u003d mappet.createCompoundFromJS({id:\"minecraft:diamond_hoe\",Count:1});\n    var item \u003d mappet.createItemNBT(tag);\n\n    // {id:\"minecraft:diamond_hoe\",Count:1b,Damage:0s}\n    c.send(item.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [
                        {
                            "name": "jsObject",
                            "type": "java.lang.Object"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createList",
                    "doc": "Create an empty NBT list.\n\n \u003cpre\u003e{@code\n    var list \u003d mappet.createList();\n\n    list.addInt(1);\n    list.addInt(2);\n    list.addInt(3);\n    list.addInt(4);\n    list.addInt(5);\n    list.addInt(6);\n\n    // [1,2,3,4,5,6]\n    c.send(list.stringify());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "createList",
                    "doc": "Parse an NBT list data out of given string, if string NBT was\n invalid then an empty list will be returned.\n\n \u003cpre\u003e{@code\n    var list \u003d mappet.createList(\"[1, 2, 3, 4, 5, 6]\");\n\n    // [1,2,3,4,5,6]\n    c.send(list.stringify());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createListFromJS",
                    "doc": "Turn a JS object into an NBT compound.\n\n \u003cp\u003e\u003cb\u003eRead carefully the description\u003c/b\u003e of {@link #createCompoundFromJS(Object)}\n for information about JS to NBT object conversion limitations!\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var list \u003d mappet.createListFromJS([1, 2, 3, 4, 5, 6]);\n\n    // [1,2,3,4,5,6]\n    c.send(list.stringify());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                    },
                    "arguments": [
                        {
                            "name": "jsObject",
                            "type": "java.lang.Object"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createItemNBT",
                    "doc": "Create an item stack out of string NBT.\n\n \u003cpre\u003e{@code\n    var item \u003d mappet.createItemNBT(\"{id:\\\"minecraft:enchanted_book\\\",Count:1b,tag:{StoredEnchantments:[{lvl:4s,id:4s}]},Damage:0s}\");\n\n    // It will output \"minecraft:enchanted_book\"\n    c.send(item.getItem().getId());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack from the string NBT data, or an empty item stack\n         if the data doesn\u0027t have a valid reference to an existing item"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createItem",
                    "doc": "Create an item stack out of string NBT.\n\n \u003cpre\u003e{@code\n    var tag \u003d mappet.createCompound(\"{id:\\\"minecraft:diamond_hoe\\\",Count:1b}\");\n    var item \u003d mappet.createItemNBT(tag);\n\n    // {id:\"minecraft:diamond_hoe\",Count:1b,Damage:0s}\n    c.send(item.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack from the NBT data, or an empty item stack if the\n         data doesn\u0027t have a valid reference to an existing item"
                    },
                    "arguments": [
                        {
                            "name": "compound",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createItem",
                    "doc": "Create an item stack with item ID.\n\n \u003cpre\u003e{@code\n    var item \u003d mappet.createItem(\"minecraft:diamond\");\n\n    // {id:\"minecraft:diamond\",Count:1b,Damage:0s}\n    c.send(item.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack with an item specified by ID, or an empty item\n         stack if the block doesn\u0027t exist"
                    },
                    "arguments": [
                        {
                            "name": "itemId",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createItem",
                    "doc": "Create an item stack with item ID, count\n\n \u003cpre\u003e{@code\n    var item \u003d mappet.createItem(\"minecraft:diamond\", 64);\n\n    // {id:\"minecraft:diamond\",Count:64b,Damage:0s}\n    c.send(item.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack with an item specified by ID, or an empty item\n         stack if the block doesn\u0027t exist"
                    },
                    "arguments": [
                        {
                            "name": "itemId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "count",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createItem",
                    "doc": "Create an item stack with item ID, count and meta\n\n \u003cpre\u003e{@code\n    var damaged_hoe \u003d mappet.createItem(\"minecraft:diamond_hoe\", 64, 5);\n\n    // {id:\"minecraft:diamond_hoe\",Count:64b,Damage:5s}\n    c.send(damaged_hoe.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack with an item specified by ID, or an empty item\n         stack if the block doesn\u0027t exist"
                    },
                    "arguments": [
                        {
                            "name": "itemId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "meta",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createBlockItem",
                    "doc": "Create an item stack with block ID.\n\n \u003cpre\u003e{@code\n    var stone \u003d mappet.createBlockItem(\"minecraft:stone\");\n\n    // {id:\"minecraft:stone\",Count:1b,Damage:0s}\n    c.send(stone.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack with an item specified by ID, or an empty item\n          stack if the block doesn\u0027t exist"
                    },
                    "arguments": [
                        {
                            "name": "blockId",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createBlockItem",
                    "doc": "Create an item stack with block ID and count.\n\n \u003cpre\u003e{@code\n    var stone \u003d mappet.createBlockItem(\"minecraft:stone\", 64);\n\n    // {id:\"minecraft:stone\",Count:64b,Damage:0s}\n    c.send(stone.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack with an item specified by ID, or an empty item\n         stack if the block doesn\u0027t exist"
                    },
                    "arguments": [
                        {
                            "name": "blockId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "count",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createBlockItem",
                    "doc": "Create an item stack with block ID, count and meta.\n\n \u003cpre\u003e{@code\n    var andesite \u003d mappet.createBlockItem(\"minecraft:stone\", 64, 5);\n\n    // {id:\"minecraft:stone\",Count:64b,Damage:5s}\n    c.send(andesite.serialize());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack with block specified by ID, or an empty item\n         stack if the block doesn\u0027t exist"
                    },
                    "arguments": [
                        {
                            "name": "blockId",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "count",
                            "type": "int"
                        },
                        {
                            "name": "meta",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getParticleType",
                    "doc": "Get Minecraft particle type by its name.\n\n \u003cp\u003eYou can find out all of the particle types by typing in \u003ccode\u003e/particle\u003c/code\u003e\n command, and looking up the completion of the first argument (i.e. press tab after\n typing in \u003ccode\u003e/particle\u003c/code\u003e and a space).\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var explode \u003d mappet.getParticleType(\"explode\");\n    var pos \u003d c.getSubject().getPosition();\n\n    c.getWorld().spawnParticles(explode, true, pos.x, pos.y + 1, pos.z, 50, 0.5, 0.5, 0.5, 0.1);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "EnumParticleTypes"
                    },
                    "arguments": [
                        {
                            "name": "type",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getPotion",
                    "doc": "Get Minecraft potion effect by its name.\n\n \u003cp\u003eYou can find out all of the particle types by typing in \u003ccode\u003e/effect\u003c/code\u003e\n command, and looking up the completion of the second argument (i.e. press tab after\n typing in \u003ccode\u003e/particle Player\u003c/code\u003e and a space).\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var slowness \u003d mappet.getPotion(\"slowness\");\n\n    c.getSubject().applyPotion(slowness, 200, 1, false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Potion"
                    },
                    "arguments": [
                        {
                            "name": "type",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createMorph",
                    "doc": "Create a morph out of string NBT.\n\n \u003cpre\u003e{@code\n    var morph \u003d mappet.createMorph(\"{Name:\\\"blockbuster.alex\\\"}\");\n\n    // Assuming c.getSubject() is a player\n    c.getSubject().setMorph(morph);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "AbstractMorph"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createMorph",
                    "doc": "Create a morph out of NBT.\n\n \u003cpre\u003e{@code\n    var tag \u003d mappet.createCompound();\n\n    tag.setString(\"Name\", \"blockbuster.alex\");\n\n    var morph \u003d mappet.createMorph(tag);\n\n    // Assuming c.getSubject() is a player\n    c.getSubject().setMorph(morph);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "AbstractMorph"
                    },
                    "arguments": [
                        {
                            "name": "compound",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createUI",
                    "doc": "Create a UI. You can send it to the player by using\n {@link IScriptPlayer#openUI(IMappetUIBuilder)} method.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var label \u003d ui.label(\"Hello, world!\").background(0x88000000);\n\n        label.rxy(0.5, 0.5).wh(80, 20).anchor(0.5).labelAnchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "createUI",
                    "doc": "Create a UI with a script handler. You can send it to the\n player by using {@link IScriptPlayer#openUI(IMappetUIBuilder)} method.\n\n\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var label \u003d ui.label(\"Hello, world!\").background(0x88000000);\n        var button \u003d ui.button(\"Push me!\").id(\"button\");\n\n        label.rxy(0.5, 0.5).wh(80, 20).anchor(0.5).labelAnchor(0.5);\n        label.rx(0.5).ry(0.5, 25).wh(80, 20).anchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"button\")\n        {\n            // Button was pressed\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "event",
                            "type": "mchorse.mappet.api.scripts.user.IScriptEvent",
                            "doc": "Script event (whose script ID will be used for UI\u0027s user input handler)."
                        },
                        {
                            "name": "function",
                            "type": "java.lang.String",
                            "doc": "Given script\u0027s function that will be used as UI\u0027s user input handler."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "createUI",
                    "doc": "Create a UI with a script handler. You can send it to the\n player by using {@link IScriptPlayer#openUI(IMappetUIBuilder)} method.\n\n \u003cp\u003eScript and function arguments allow to point to the function in some\n script, which it will be responsible for handling the user input from\n scripted UI.\u003c/p\u003e\n\n \u003cp\u003eIn the UI handler, you can access subject\u0027s UI context ({@link IMappetUIContext})\n which has all the necessary methods to handle user\u0027s input.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // ui.js\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(\"handler\", \"main\").background();\n        var label \u003d ui.label(\"Hello, world!\").background(0x88000000);\n        var button \u003d ui.button(\"Push me!\").id(\"button\");\n\n        label.rxy(0.5, 0.5).wh(80, 20).anchor(0.5).labelAnchor(0.5);\n        label.rx(0.5).ry(0.5, 25).wh(80, 20).anchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n\n    // handler.js\n    function main(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"button\")\n        {\n            // Button was pressed\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "script",
                            "type": "java.lang.String",
                            "doc": "The script which will be used as UI\u0027s user input handler."
                        },
                        {
                            "name": "function",
                            "type": "java.lang.String",
                            "doc": "Given script\u0027s function that will be used as UI\u0027s user input handler."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "get",
                    "doc": "Get a global arbitrary object.\n\n \u003cpre\u003e{@code\n    var number \u003d mappet.get(\"number\");\n\n    if (number \u003d\u003d\u003d null || number \u003d\u003d\u003d undefined)\n    {\n        number \u003d 42;\n        mappet.set(\"number\", number);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.Object"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "set",
                    "doc": "Set a global arbitrary object during server\u0027s existence (other scripts\n can access this data too).\n\n \u003cpre\u003e{@code\n    var number \u003d mappet.get(\"number\");\n\n    if (number \u003d\u003d\u003d null || number \u003d\u003d\u003d undefined)\n    {\n        number \u003d 42;\n        mappet.set(\"number\", number);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "object",
                            "type": "java.lang.Object"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dump",
                    "doc": "Dump the simple representation of given non-JS object into the string (to see\n what fields and methods are available for use).\n\n \u003cpre\u003e{@code\n    var morph \u003d mappet.createMorph(\"{Name:\\\"blockbuster.alex\\\"}\");\n\n    c.send(mappet.dump(morph));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [
                        {
                            "name": "object",
                            "type": "java.lang.Object"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dump",
                    "doc": "Dump given non-JS object into the string (to see what fields and methods are\n available for use).\n\n \u003cpre\u003e{@code\n    var morph \u003d mappet.createMorph(\"{Name:\\\"blockbuster.alex\\\"}\");\n\n    c.send(mappet.dump(morph, true));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [
                        {
                            "name": "object",
                            "type": "java.lang.Object"
                        },
                        {
                            "name": "simple",
                            "type": "boolean",
                            "doc": "Whether you want to see simple or full information about\n               the object."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "random",
                    "doc": "Generate a random number between 0 and the given max value (but not\n including the maximum value).\n\n \u003cpre\u003e{@code\n    var randomNumber \u003d mappet.random(10);\n\n    c.send(randomNumber);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "double"
                    },
                    "arguments": [
                        {
                            "name": "max",
                            "type": "double",
                            "doc": "Maximum value."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "random",
                    "doc": "Generate a random number between the given min value and the given max value\n (but not including the maximum value).\n\n \u003cpre\u003e{@code\n    var randomNumber \u003d mappet.random(5, 10);\n\n    c.send(randomNumber);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "double"
                    },
                    "arguments": [
                        {
                            "name": "min",
                            "type": "double",
                            "doc": "Minimum value."
                        },
                        {
                            "name": "max",
                            "type": "double",
                            "doc": "Maximum value."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "random",
                    "doc": "Generate a random number between the given min value and the given max value\n (but not including the maximum value) with given seed.\n\n \u003cpre\u003e{@code\n    var randomNumber \u003d mappet.random(5, 10, 4141241);\n\n    c.send(randomNumber);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "double"
                    },
                    "arguments": [
                        {
                            "name": "min",
                            "type": "double",
                            "doc": "Minimum value."
                        },
                        {
                            "name": "max",
                            "type": "double",
                            "doc": "Maximum value."
                        },
                        {
                            "name": "seed",
                            "type": "long"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "style",
                    "doc": "Return Minecraft\u0027s formatting code.\n\n \u003cp\u003eFollowing colors are supported: black, dark_blue, dark_green, dark_aqua,\n dark_red, dark_purple, gold, gray, dark_gray, blue, green, aqua, red,\n light_purple, yellow, white\u003c/p\u003e\n\n \u003cp\u003eFollowing styles are supported: obfuscated, bold, strikethrough, underline,\n italic, reset.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var style \u003d mappet.style(\"dark_blue\", \"bold\", \"underline\");\n\n    c.send(colorCode + \"This text is in blue!\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [
                        {
                            "name": "codes",
                            "type": "java.lang.String",
                            "doc": "An enumeration of formatting codes."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getLogger",
                    "doc": "Return a mappet logger instance.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.logs.IMappetLogger"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "vector2",
                    "doc": "Create an empty (0, 0) 2D vector.",
                    "returns": {
                        "type": "Vector2d"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "vector2",
                    "doc": "Create a 2D vector.\n\n \u003cpre\u003e{@code\n    var a \u003d mappet.vector2(1, 0);\n    var b \u003d mappet.vector2(-1, 1);\n\n    a.normalize();\n    b.normalize();\n\n    c.send(\"Dot product of a and b is: \" + a.dot(b));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Vector2d"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "vector2",
                    "doc": "Copy a 2D vector.\n\n \u003cpre\u003e{@code\n    var a \u003d mappet.vector2(25, 17);\n    var b \u003d mappet.vector2(a);\n\n    b.x +\u003d 40;\n    b.y -\u003d 5;\n\n    var d \u003d mappet.vector2(b);\n\n    d.sub(a);\n\n    c.send(\"Distance between a and b is: \" + d.length());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Vector2d"
                    },
                    "arguments": [
                        {
                            "name": "v",
                            "type": "Vector2d"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "vector3",
                    "doc": "Create an empty (0, 0, 0) 3D vector.",
                    "returns": {
                        "type": "Vector3d"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "vector3",
                    "doc": "Create a 3D vector.\n\n \u003cpre\u003e{@code\n    var look \u003d c.getSubject().getLook();\n    var a \u003d mappet.vector3(look.x, look.y, look.z);\n    var b \u003d mappet.vector3(0, 0, 1);\n\n    a.normalize();\n    b.normalize();\n\n    c.send(\"Dot product of entity\u0027s look vector and positive Z is: \" + a.dot(b));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Vector3d"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "vector3",
                    "doc": "Copy a 3D vector.\n\n \u003cpre\u003e{@code\n    var pos \u003d c.getSubject().getPosition();\n    var a \u003d mappet.vector3(pos.x, pos.y, pos.z);\n    var b \u003d mappet.vector3(10, 4, 50);\n\n    var d \u003d mappet.vector3(b);\n\n    d.sub(a);\n\n    c.send(\"Distance between you and point (10, 4, 50) is: \" + d.length());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Vector3d"
                    },
                    "arguments": [
                        {
                            "name": "v",
                            "type": "Vector3d"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "vector4",
                    "doc": "Create a 4D vector.",
                    "returns": {
                        "type": "Vector4d"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "vector4",
                    "doc": "Create a 4D vector.",
                    "returns": {
                        "type": "Vector4d"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "double"
                        },
                        {
                            "name": "y",
                            "type": "double"
                        },
                        {
                            "name": "z",
                            "type": "double"
                        },
                        {
                            "name": "w",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "vector4",
                    "doc": "Copy a 4D vector.",
                    "returns": {
                        "type": "Vector4d"
                    },
                    "arguments": [
                        {
                            "name": "v",
                            "type": "Vector4d"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "matrix3",
                    "doc": "Create an identity 3x3 matrix.\n\n \u003cpre\u003e{@code\n    var v \u003d mappet.vector3(0, 0, 1);\n    var rotation \u003d mappet.matrix3();\n\n    rotation.rotY(Math.PI / 2);\n    rotation.transform(v);\n\n    c.send(\"Final point is: \" + v);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Matrix3d"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "matrix3",
                    "doc": "Copy a 3x3 matrix.",
                    "returns": {
                        "type": "Matrix3d"
                    },
                    "arguments": [
                        {
                            "name": "m",
                            "type": "Matrix3d"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "matrix4",
                    "doc": "Create an identity 4x4 matrix.\n\n \u003cpre\u003e{@code\n    var v \u003d mappet.vector4(0, 0, 1, 1);\n    var rotation \u003d mappet.matrix4();\n\n    rotation.rotY(Math.PI / 2);\n\n    var translation \u003d mappet.matrix4();\n\n    translation.setTranslation(mappet.vector3(0, 4, 0));\n    rotation.mul(translation);\n    rotation.transform(v);\n\n    c.send(\"Final point is: \" + v.x + \", \" + v.y + \", \" + v.z);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "Matrix4d"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "matrix4",
                    "doc": "Copy a 4x4 matrix.",
                    "returns": {
                        "type": "Matrix4d"
                    },
                    "arguments": [
                        {
                            "name": "m",
                            "type": "Matrix4d"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isPointInBounds",
                    "doc": "Determines whether a point is located inside a bounding volume specified by two corners.\n This method works with different vector types (2D, 3D, and 4D).\n\n \u003cpre\u003e{@code\n   var pos \u003d c.getSubject().getPosition();\n   var point \u003d mappet.Vector3(pos.x, pos.y, pos.z);\n   var bound1 \u003d mappet.Vector3(0, 0, 0);\n   var bound2 \u003d mappet.Vector3(10, 10, 10);\n   var isInside \u003d mappet.isPointInBounds(point, bound1, bound2);\n   c.send(\"Is the point inside the bounding volume? \" + isInside);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "true if the point is inside the bounding volume, false otherwise."
                    },
                    "arguments": [
                        {
                            "name": "point",
                            "type": "java.lang.Object",
                            "doc": "The position of the point to check."
                        },
                        {
                            "name": "bound1",
                            "type": "java.lang.Object",
                            "doc": "The position of one corner of the bounding volume."
                        },
                        {
                            "name": "bound2",
                            "type": "java.lang.Object",
                            "doc": "The position of the opposite corner of the bounding volume."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "toNBT",
                    "doc": "Converts an object to an INBTCompound representation.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound",
                        "doc": "The INBTCompound representation of the object or null if the object is not of the expected types."
                    },
                    "arguments": [
                        {
                            "name": "object",
                            "type": "java.lang.Object",
                            "doc": "The object to convert to an INBTCompound."
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.IScriptEvent",
            "doc": "Script event.\n\n \u003cp\u003eThis interface represent the event, the only argument that was passed\n into script\u0027s function. It contains many different useful methods to\n interact with Minecraft on the server side.\u003c/p\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getScript",
                    "doc": "Get script\u0027s ID to which this event was passed to.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getFunction",
                    "doc": "Get script\u0027s function name.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getSubject",
                    "doc": "Get subject (primary) entity that was passed into the event.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getObject",
                    "doc": "Get object (secondary) entity that was passed into the event.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptEntity"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getPlayer",
                    "doc": "Get the first player from either subject or object (or \u003ccode\u003enull\u003c/code\u003e, if there is no player).",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptPlayer"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getNPC",
                    "doc": "Get the first Mappet NPC from either subject or object (or \u003ccode\u003enull\u003c/code\u003e, if there is no NPC).",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.entities.IScriptNpc"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getWorld",
                    "doc": "Get the world in which this event happened.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptWorld"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getFancyWorld",
                    "doc": "Get the fancy world in which this event happened.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptFancyWorld"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getServer",
                    "doc": "Get the server in which this event happened.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.IScriptServer"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getValues",
                    "doc": "Get a map of extra context values that was passed into the event.",
                    "returns": {
                        "type": "java.util.Map"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getValue",
                    "doc": "Get a value for given key (might be a \u003ccode\u003enull\u003c/code\u003e).",
                    "returns": {
                        "type": "java.lang.Object"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setValue",
                    "doc": "Set a value for given key in extra data.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "java.lang.Object"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "cancel",
                    "doc": "Cancel the trigger event.\n\n \u003cp\u003eDepending on the type of event, it can prevent the\n default behavior (for example for chat trigger, if you cancel it, it won\u0027t\n send the message into the chat).\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // Assuming this script was attached to global trigger \"On block placed,\"\n    // this script will cancel placing of the block by a player\n    function main(c)\n    {\n        if (c.getValue(\"block\") \u003d\u003d\u003d \"minecraft:stone\")\n        {\n            c.cancel();\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "scheduleScript",
                    "doc": "Schedule execution of the same script (with same function)\n given ticks forward.\n\n \u003cp\u003eRead {@link #scheduleScript(String, String, int)} for more information.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var states \u003d c.getServer().getStates();\n        var counter \u003d states.getNumber(\"counter\");\n\n        if (counter \u003c 10)\n        {\n            c.send(counter + \" Mississippi...\");\n            states.add(\"counter\", 1);\n\n            c.scheduleScript(20);\n        }\n        else\n        {\n            states.reset(\"counter\");\n            c.send(\"Here I go!\");\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "delay",
                            "type": "int",
                            "doc": "How many ticks should pass before scheduled script will be executed."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "scheduleScript",
                    "doc": "Schedule execution of the same script with given function\n given ticks forward.\n\n \u003cp\u003eRead {@link #scheduleScript(String, String, int)} for more information.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        // Schedule script execution of function other\n        // within same script a second later\n        c.scheduleScript(\"other\", 20);\n    }\n\n    function other(c)\n    {\n        c.send(\"A second ago, function \\\"main\\\" told me to say \\\"hi\\\" to you... :)\")\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "function",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "delay",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "scheduleScript",
                    "doc": "Schedule execution of given script with specific function\n given ticks forward.\n\n \u003cp\u003eWhen scheduling a script, it will use same data which were passed\n into current script\u0027s function. I.e. subject, object, world, server\n and values.\u003c/p\u003e\n\n \u003cp\u003e\u003cb\u003eProTip\u003c/b\u003e: if you put some values into this context using\n {@link #setValue(String, Object)}, then that value will be also available\n when the scheduled script will be executed.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // Script \"a\"\n    function main(c)\n    {\n        // As ProTip states, you can pass some value using\n        // setValue() and getValue() event\u0027s functions\n        c.setValue(\"message\", \"Hello!\");\n\n        // Schedule script \"b\" execution a second later\n        c.scheduleScript(\"b\", \"main\", 20);\n    }\n\n    // Script \"b\"\n    function main(c)\n    {\n        c.send(\"A second ago, script \\\"a\\\" told me deliver this message: \" + c.getValue(\"message\"));\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "script",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "function",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "delay",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "scheduleScript",
                    "doc": "Schedule a JavaScript function (instead of script). Once the timer has expired,\n given function will be called with this context as the only argument.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        c.scheduleScript(60, function (context)\n        {\n            context.send(\"This was called three seconds later!\");\n        });\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "delay",
                            "type": "int"
                        },
                        {
                            "name": "function",
                            "type": "jdk.nashorn.api.scripting.ScriptObjectMirror"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "scheduleScript",
                    "doc": "Schedule a function (instead of script). Once the timer has expired,\n given function will be called with this context as the only argument.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "delay",
                            "type": "int"
                        },
                        {
                            "name": "consumer",
                            "type": "java.util.function.Consumer"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "executeCommand",
                    "doc": "Execute a command.\n\n \u003cpre\u003e{@code\n    c.executeCommand(\"/kick Creeper501\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int",
                        "doc": "How many successful commands were run. 0 - command errored, 1 - command was successful,\n      2 or above - multiple commands were executed using target selectors."
                    },
                    "arguments": [
                        {
                            "name": "command",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "send",
                    "doc": "Send a message to all players in the chat.\n\n \u003cpre\u003e{@code\n    c.send(\"Hi :)\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
            "doc": "This interface represents an item stack",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftItemStack",
                    "doc": "Get Minecraft item stack instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "ItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isEmpty",
                    "doc": "Whether this item is empty.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getItem",
                    "doc": "Get item stack\u0027s item.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItem"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "copy",
                    "doc": "Get a copy of item stack.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getMaxCount",
                    "doc": "Get item stack\u0027s maximum size.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getCount",
                    "doc": "Get item stack\u0027s count.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setCount",
                    "doc": "Set item stack\u0027s count.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "count",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getMeta",
                    "doc": "Get item stack\u0027s meta.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setMeta",
                    "doc": "Set item stack\u0027s meta.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "meta",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "hasData",
                    "doc": "Check whether an item stack has an NBT compound tag.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getData",
                    "doc": "Get item stack\u0027s NBT compound tag.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setData",
                    "doc": "Replace item stack\u0027s NBT compound tag.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "serialize",
                    "doc": "Serialize item stack to an NBT compound.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getDisplayName",
                    "doc": "Get display name of the item stack.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setDisplayName",
                    "doc": "Set display name of the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "name",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getLore",
                    "doc": "Get lore of the item stack.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getLoreList",
                    "doc": "Get all lore lines of the item stack as a list.",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setLore",
                    "doc": "Set lore of the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "lore",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addLore",
                    "doc": "Add a lore line to the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "lore",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearAllLores",
                    "doc": "Remove all lore lines from the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "clearLore",
                    "doc": "Remove a lore line from the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearAllEnchantments",
                    "doc": "Clear all enchantments from the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getCanDestroyBlocks",
                    "doc": "Get a list of all blocks the item stack can destroy.",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "addCanDestroyBlock",
                    "doc": "Add a block that the item stack can destroy.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "block",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearAllCanDestroyBlocks",
                    "doc": "Clear all blocks that the item stack can destroy.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "clearCanDestroyBlock",
                    "doc": "Clear a block that the item stack can destroy.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "block",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getCanPlaceOnBlocks",
                    "doc": "Get a list of all blocks the item stack can place on.",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "addCanPlaceOnBlock",
                    "doc": "Add a block that the item stack can place on.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "block",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clearAllCanPlaceOnBlocks",
                    "doc": "Clear all blocks that the item stack can place on.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "clearCanPlaceOnBlock",
                    "doc": "Clear a block that the item stack can place on.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "block",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getRepairCost",
                    "doc": "Get repair cost of the item stack.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setRepairCost",
                    "doc": "Set repair cost of the item stack.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "cost",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isUnbreakable",
                    "doc": "Check if an item stack is unbreakable.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setUnbreakable",
                    "doc": "Set whether an item stack is unbreakable or not.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "unbreakable",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.items.IScriptItem",
            "doc": "This interface represents an item",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftItem",
                    "doc": "Get Minecraft item instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "Item"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getId",
                    "doc": "Get item\u0027s ID like \"minecraft:stick\" or \"minecraft:diamond_hoe\"",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isSame",
                    "doc": "Check whether given item is same as this one",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "item",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItem"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.items.IScriptInventory",
            "doc": "This interface represents an inventory.\n\n \u003cp\u003eSee {@link IScriptPlayer#getInventory()} and\n {@link IScriptWorld#getInventory(int, int, int)} for ways to get\n inventories from player and world, respectively.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        // Get player\u0027s inventory\n        if (c.getSubject().isPlayer())\n        {\n            var inventory \u003d c.getSubject().getInventory();\n\n            // Do something with player\u0027s inventory\n        }\n\n        // Get chest\u0027s inventory in the world\n        if (c.getWorld().hasInventory(214, 4, 512))\n        {\n            var inventory \u003d c.getWorld().getInventory(214, 4, 512);\n\n            // Do something with chest\u0027s inventory\n        }\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getMinecraftInventory",
                    "doc": "Get Minecraft inventory instance. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "IInventory"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isEmpty",
                    "doc": "Check whether this inventory is empty.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "size",
                    "doc": "Return the maximum amount of item stacks in this inventory.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var inventory \u003d c.getSubject().getInventory();\n    var item \u003d mappet.createItem(\"minecraft:stick\");\n\n    for (var i \u003d 0; i \u003c inventory.size(); i++)\n    {\n        // We do a little bit of trolling\n        inventory.setStack(i, item);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getStack",
                    "doc": "Get stack in slot at given index.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var inventory \u003d c.getSubject().getInventory();\n    var first \u003d inventory.getStack(0);\n\n    if (first.isEmpty())\n    {\n        // Give a stick into first player\u0027s hotbar slot\n        inventory.setStack(0, mappet.createItem(\"minecraft:stick\"));\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "an item stack at given index"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "removeStack",
                    "doc": "Remove a stack at given index\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var inventory \u003d c.getSubject().getInventory();\n    var first \u003d inventory.removeStack(0);\n\n    if (first.isEmpty())\n    {\n        c.getSubject().send(\"Oh... you had nothing...\");\n    }\n    else\n    {\n        c.getSubject().send(\"Ha-ha, I stole your \" + first.getItem().getId());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack",
                        "doc": "removed item stack"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setStack",
                    "doc": "Replace given stack at index.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    var inventory \u003d c.getSubject().getInventory();\n\n    inventory.setStack(4, mappet.createItem(\"minecraft:diamond_sword\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clear",
                    "doc": "Empty the inventory.\n\n \u003cpre\u003e{@code\n    // Assuming that c.getSubject() is a player\n    c.getSubject().getInventory().clear();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getName",
                    "doc": "Get basic inventory\u0027s name. This works only for inventories that support\n naming, like chests.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "hasCustomName",
                    "doc": "Whether this inventory has a name. This works only for inventories that\n support naming, like chests.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "setName",
                    "doc": "Set basic inventory\u0027s name. This works only for inventories that\n support naming, like chests.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "name",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.logs.IMappetLogger",
            "doc": "This interface represents Mappet logger.\n\n \u003cp\u003eUse {@link IScriptFactory#getLogger()} to get Mappet logger instance.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    var logger \u003d mappet.getLogger();\n\n    logger.info(\"Hello world!\");\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "error",
                    "doc": "Logging a message with \u003cb\u003eERROR\u003c/b\u003e level.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "warning",
                    "doc": "Logging a message with \u003cb\u003eWARNING\u003c/b\u003e level.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "info",
                    "doc": "Logging a message with \u003cb\u003eINFO\u003c/b\u003e level.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "debug",
                    "doc": "Logging a message with \u003cb\u003eDEBUG\u003c/b\u003e level.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "message",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.mappet.IMappetUIContext",
            "doc": "This interface represents an UI context, which is an object that\n stores UI data when player has opened custom GUI made with\n {@link IMappetUIBuilder}.\n\n \u003cp\u003eIt\u0027s usually available after the UI has been sent using {@link IScriptPlayer#openUI(IMappetUIBuilder)}\n in the handler function.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.button(\"Push me\").id(\"button\");\n\n        // Place a button in the middle of the screen\n        button.rxy(0.5, 0.5).wh(80, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        // Do something with UI context...\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getData",
                    "doc": "Get the NBT compound of the UI data.\n\n \u003cp\u003eThis data is formed by the UI components that have ID. The data will\n be populated only when the UI elements will actually change their values.\n Until then this data will be empty.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var name \u003d ui.textbox().id(\"name\");\n        var lastname \u003d ui.textbox().id(\"lastname\");\n\n        // Place two text fields in the middle of the screen\n        name.rxy(0.5, 0.5).wh(140, 20).anchor(0.5);\n        lastname.rx(0.5).ry(0.5, 25).wh(140, 20).anchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        // If the user will input first in the name text box, the data\n        // will be just {name:\"John\"}. If the user will input first\n        // the lastname, then the data will be {lastname:\"Appleseed\"}.\n        // Once both fields will be edited, you\u0027ll get:\n        // {name:\"John\",lastname:\"Appleseed\"}\n        c.send(uiContext.getData().stringify());\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isClosed",
                    "doc": "Returns whether the UI was just closed.\n\n \u003cp\u003eThe return value is \u003ccode\u003etrue\u003c/code\u003e only when the user closed the\n screen, and the UI context is about to get cleared from the player.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.button(\"Push me\").id(\"button\");\n\n        // Place a button in the middle of the screen\n        button.rxy(0.5, 0.5).wh(80, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        // Check if the user closed the screen\n        if (uiContext.isClosed())\n        {\n            // Do something with the data\n            c.getSubject().send(\"Welcome back to the world!\");\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getLast",
                    "doc": "Get the ID of last edited UI component.\n\n \u003cp\u003eIf there were multiple UI elements were changed (see {@link UIComponent#updateDelay(int)}),\n then only the last one will be provided.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var title \u003d ui.label(\"...\").id(\"title\");\n        var name \u003d ui.textbox().id(\"name\");\n        var lastname \u003d ui.textbox().id(\"lastname\");\n\n        // Place two text fields in the middle of the screen\n        name.rxy(0.5, 0.5).wh(140, 20).anchor(0.5);\n        lastname.rx(0.5).ry(0.5, 25).wh(140, 20).anchor(0.5);\n        title.rx(0.5).y(20).wh(140, 20).anchorX(0.5);\n        title.labelAnchor(0.5, 0.5);\n\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var last \u003d uiContext.getLast();\n\n        // Depending on the last value, update the title accordingly\n        if (last \u003d\u003d\u003d \"name\")\n        {\n            uiContext.get(\"title\").label(\"Name: \" + uiContext.getData().getString(\"name\"));\n        }\n        else if (last \u003d\u003d\u003d \"lastname\")\n        {\n            uiContext.get(\"title\").label(\"Last name: \" + uiContext.getData().getString(\"lastname\"));\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getHotkey",
                    "doc": "Get the ID of the last pressed hot key.\n\n \u003cp\u003eIf no keybind was pressed, it will be an empty string (\u003ccode\u003e\"\"\u003c/code\u003e).\n See {@link UIComponent#keybind(int, String, String, boolean, boolean, boolean)} method\n for an example.\u003c/p\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getContext",
                    "doc": "Get the ID of the last context menu item.\n\n \u003cp\u003eIf no context menu was activated, it will be an empty string (\u003ccode\u003e\"\"\u003c/code\u003e).\n See {@link UIComponent#context(String, String, String, int)} method for an example.\u003c/p\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "get",
                    "doc": "Returns a UI component by given ID or \u003ccode\u003enull\u003c/code\u003e. You can use this\n in the handler script of the UI to change certain properties.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.button(\"Push me\").id(\"button\");\n\n        // Place a button in the middle of the screen\n        button.rxy(0.5, 0.5).wh(80, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"button\")\n        {\n            uiContext.get(\"button\").label(\"Push me harder!\");\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "sendToPlayer",
                    "doc": "Sends UI changes to the player.\n\n \u003cp\u003eIf you edited the UI context\u0027s component data using {@link IMappetUIContext#get(String)}\n outside of the UI handler script (UI context, after executing the handler script, sends the\n changed data afterwards automatically), you need to manually send the data to the player\n using this function.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // ui.js\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var button \u003d ui.button(\"Push me\").id(\"button\");\n\n        // Place a button in the middle of the screen\n        button.rxy(0.5, 0.5).wh(80, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    // other.js\n    function main(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        // Assuming that UI context is still present (i.e. the UI is still open)\n        if (uiContext)\n        {\n            uiContext.get(\"button\").label(\"Too late!\");\n            uiContext.sendToPlayer();\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder",
            "doc": "This is user interface builder interface. You can create GUIs with this thing.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI();\n\n        // Build a UI using ui...\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "getCurrent",
                    "doc": "Get current UI component on to which it adds children components.\n\n \u003cp\u003eIt\u0027s useful only after using {@link IMappetUIBuilder#layout()},\n {@link IMappetUIBuilder#column(int)}, {@link IMappetUIBuilder#row(int)}, and\n {@link IMappetUIBuilder#grid(int)} to being able to position layout element.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "background",
                    "doc": "Enable default background (subtle gradient of two half transparent dark colors).",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "notClosable",
                    "doc": "Disable an ability for players to manually close opened screens built with an API\n by pressing escape.\n\n \u003cp\u003e\u003cb\u003eBEWARE\u003c/b\u003e: players will get stuck if you won\u0027t provide a way to close your\n custom UI manually. ProTip: use {@link IScriptPlayer#closeUI()} to close player\u0027s\n screen.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").notClosable().background();\n        var close \u003d ui.icon(\"close\").id(\"exit\");\n\n        ui.text(\"[oTo close this screen, gently click on the button in the top right corner...\").rxy(0.5, 0.5).w(200).anchor(0.5);\n\n        close.rx(1, -25).y(5).wh(20, 20);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"exit\")\n        {\n            c.getSubject().closeUI();\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "closable",
                    "doc": "Toggle closability of this UI screen.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "closable",
                            "type": "boolean",
                            "doc": "Whether this UI screen can be closed or not (by default it is closable)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "paused",
                    "doc": "Toggle pausing of this UI screen.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "paused",
                            "type": "boolean",
                            "doc": "Whether this UI screen is paused when opened."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "create",
                    "doc": "Create and insert a UI component based on its ID into UI being built by this builder.\n\n \u003cp\u003eThis method is future proof for in case other modders will be adding their own\n components, and the only way to create 3rd party UI components is using this method by\n providing the ID of 3rd party UI component.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var label \u003d ui.create(\"label\").label(\"Welcome, [l\" + c.getSubject().getName() + \"[r!\");\n\n        label.rxy(0.5, 0.5).wh(100, 20).anchor(0.5);\n        label.color(0x00ee22).background(0x88000000).labelAnchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String",
                            "doc": "ID of desired component to be created."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "graphics",
                    "doc": "Create and insert a graphics UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIGraphicsComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIGraphicsComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "button",
                    "doc": "Create and insert a button UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIButtonComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIButtonComponent"
                    },
                    "arguments": [
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "icon",
                    "doc": "Create and insert an icon button UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIIconButtonComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIIconButtonComponent"
                    },
                    "arguments": [
                        {
                            "name": "icon",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "label",
                    "doc": "Create and insert a label UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILabelComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelComponent"
                    },
                    "arguments": [
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "text",
                    "doc": "Create and insert a text UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILabelComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextComponent"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "textbox",
                    "doc": "Create and insert a textbox UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UITextboxComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextboxComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "textbox",
                    "doc": "Create and insert a textbox UI component into UI, with default value filled,\n being built by this builder.\n\n \u003cp\u003eCheck {@link UITextboxComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextboxComponent"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "textbox",
                    "doc": "Create and insert a textbox UI component into UI, with default value filled\n and maximum length, being built by this builder.\n\n \u003cp\u003eCheck {@link UITextboxComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextboxComponent"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "maxLength",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "textarea",
                    "doc": "Create and insert a textarea UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UITextareaComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextareaComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "textarea",
                    "doc": "Create and insert a textarea UI component into UI, with default value filled,\n being built by this builder.\n\n \u003cp\u003eCheck {@link UITextareaComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextareaComponent"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "toggle",
                    "doc": "Create and insert a toggle UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIToggleComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIToggleComponent"
                    },
                    "arguments": [
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "toggle",
                    "doc": "Create and insert a toggle UI component into UI, with default toggled state,\n being built by this builder.\n\n \u003cp\u003eCheck {@link UIToggleComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIToggleComponent"
                    },
                    "arguments": [
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "trackpad",
                    "doc": "Create and insert a trackpad UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UITrackpadComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "trackpad",
                    "doc": "Create and insert a trackpad UI component into UI, with default filled value,\n being built by this builder.\n\n \u003cp\u003eCheck {@link UITrackpadComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stringList",
                    "doc": "Create and insert a string list UI component into UI, with list of possible\n values in the list, being built by this builder.\n\n \u003cp\u003eCheck {@link UIStringListComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "values",
                            "type": "java.util.List"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stringList",
                    "doc": "Create and insert a string list UI component into UI, with list of possible\n values in the list and selected index by default, being built by this builder.\n\n \u003cp\u003eCheck {@link UIStringListComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "values",
                            "type": "java.util.List"
                        },
                        {
                            "name": "selected",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "item",
                    "doc": "Create and insert an item stack UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIStackComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStackComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "item",
                    "doc": "Create and insert an item stack UI component into UI, with default item stack\n picked, being built by this builder.\n\n \u003cp\u003eCheck {@link UIStackComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStackComponent"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "morph",
                    "doc": "Create and insert a morph UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIMorphComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "morph",
                    "doc": "Create and insert a morph UI component into UI, with a flag whether the player\n can pick or edit the morph, being built by this builder.\n\n \u003cp\u003eCheck {@link UIMorphComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        },
                        {
                            "name": "editing",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "click",
                    "doc": "Create and insert a click area UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UIClickComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIClickComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "layout",
                    "doc": "Create and insert a layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "column",
                    "doc": "Create and insert a column layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "column",
                    "doc": "Create and insert a column layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        },
                        {
                            "name": "padding",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "row",
                    "doc": "Create and insert a row layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "row",
                    "doc": "Create and insert a row layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        },
                        {
                            "name": "padding",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "grid",
                    "doc": "Create and insert a grid layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "grid",
                    "doc": "Create and insert a grid layout UI component into UI being built by this builder.\n\n \u003cp\u003eCheck {@link UILayoutComponent} for description and examples.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.mappet.IMappetUIBuilder"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        },
                        {
                            "name": "padding",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.mappet.IMappetStates",
            "doc": "This interface represents Mappet states. Server ({@link mchorse.mappet.api.scripts.user.IScriptServer}),\n players ({@link mchorse.mappet.api.scripts.user.entities.IScriptPlayer})\n and NPCs ({@link mchorse.mappet.api.scripts.user.entities.IScriptNpc}) can have states.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var states \u003d c.getServer().getStates();\n\n        // Do something with global states...\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "add",
                    "doc": "Add some value to existing state by ID.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    states.add(\"total_spending\", 20);\n    c.send(\"Total spending is now \" + states.getNumber(\"total_spending\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "double",
                        "doc": "original value plus the provided value"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setNumber",
                    "doc": "Set numeric value to existing state by ID.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    states.setNumber(\"total_spending\", 1000000001);\n    c.send(\"Total spending is now \" + states.getNumber(\"total_spending\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setString",
                    "doc": "Set string value to existing state by ID.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getSubject().getStates();\n\n    states.setString(\"name\", \"Jeff\");\n    c.getSubject().send(\"Your name is \" + states.getString(\"name\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getNumber",
                    "doc": "Get a numeric value of a state by given ID.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    c.send(\"Total spending is \" + states.getNumber(\"total_spending\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "double",
                        "doc": "state value, or 0 if no state found"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isNumber",
                    "doc": "Check if a state instance of number.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    c.send(\"State is number: \" + states.isNumber(\"state_number\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getString",
                    "doc": "Get a string value of a state by given ID.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getSubject().getStates();\n\n    c.send(\"Your RPG class is: \" + states.getString(\"class\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String",
                        "doc": "state value, or empty string if no state found"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isString",
                    "doc": "Check if a state instance of string.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    c.send(\"State is string: \" + states.isString(\"state_string\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "reset",
                    "doc": "Removes a state by given ID.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    // The city has been defaulted\n    states.reset(\"total_spendings\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "resetMasked",
                    "doc": "Removes multiple states by using mask.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    // Remove all states that start with \"regions.\"\n    states.resetMasked(\"regions.*\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "clear",
                    "doc": "Remove all states.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getServer().getStates();\n\n    // Game over\n    states.clear();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "has",
                    "doc": "Check whether state by given ID exists.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getSubject().getStates();\n    var name \u003d states.has(\"name\") ? states.getString(\"name\") : \"Jeff\";\n\n    c.getSubject().send(\"Your name is \" + name);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "keys",
                    "doc": "Get IDs of all states.\n\n \u003cpre\u003e{@code\n    var states \u003d c.getSubject().getStates().keys();\n\n    for each (var key in states)\n    {\n        c.send(\"Server has state: \" + key);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.Set"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.mappet.IMappetQuests",
            "doc": "This interface represents Mappet player\u0027s quests.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        // Assuming that subject entity is a IScriptPlayer\n        var quests \u003d c.getSubject().getQuests();\n\n        // Do something with quests...\n    }\n }\u003c/pre\u003e",
            "interfaces": [],
            "methods": [
                {
                    "name": "has",
                    "doc": "Check whether these quests have a quest by given ID.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().getQuests().has(\"important_quest\"))\n    {\n        // § is section symbol\n        c.getSubject().send(\"You can\u0027t do this until you finish §6Important quest§r!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "add",
                    "doc": "Add a quest into these quests by given ID.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().getQuests().add(\"important_quest\"))\n    {\n        c.getSubject().send(\"Check your quests!\");\n    }\n    else\n    {\n        c.getSubject().send(\"You already have this quest, huh...\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "\u003ccode\u003etrue\u003c/code\u003e if a quest was successfully added, \u003ccode\u003efalse\u003c/code\u003e if\n         player has already this quest, or if the quest doesn\u0027t exist."
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isComplete",
                    "doc": "Check whether a quest by given ID can be completed.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().getQuests().isComplete(\"important_quest\"))\n    {\n        c.getSubject().send(\"I think you should bring this quest back to Steve!\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "complete",
                    "doc": "Complete (and reward) the quest in these quests by given ID.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().getQuests().complete(\"important_quest\"))\n    {\n        c.getSubject().send(\"Important quest was successfully completed!\");\n    }\n    else\n    {\n        c.getSubject().send(\"Finish your objectives first...\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "\u003ccode\u003etrue\u003c/code\u003e if player was rewarded and quest was removed from the\n         quests list, \u003ccode\u003efalse\u003c/code\u003e if the quest by given ID isn\u0027t present."
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "decline",
                    "doc": "Remove the quest from these quests by given ID.\n\n \u003cpre\u003e{@code\n    if (c.getSubject().getQuests().decline(\"important_quest\"))\n    {\n        c.getSubject().send(\"You failed the objective... you\u0027ll need to retake quest  !\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "\u003ccode\u003etrue\u003c/code\u003e if the quest was removed, \u003ccode\u003efalse\u003c/code\u003e if the\n         quest wasn\u0027t even present in these quests."
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getIds",
                    "doc": "Get all present quests\u0027 IDs.\n\n \u003cpre\u003e{@code\n    var quests \u003d c.getSubject().getQuests();\n    var ids \u003d quests.getIds();\n    var completedAll \u003d true;\n\n    for each (var id in ids)\n    {\n        if (!quests.isComplete(id))\n        {\n            completedAll \u003d false;\n\n            break;\n        }\n    }\n\n    if (completedAll)\n    {\n        c.getSubject().send(\"You need to complete all before you can do this...\");\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.Set"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.nbt.INBTList",
            "doc": "Interface that represents an NBT list tag",
            "interfaces": [
                "mchorse.mappet.api.scripts.user.nbt.INBT"
            ],
            "methods": [
                {
                    "name": "getNBTTagList",
                    "doc": "Get raw NBT tag list. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "NBTTagList"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "has",
                    "doc": "Check whether this list has an element at given index (instead of\n checking manually for index to be within 0..size-1 range)",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "remove",
                    "doc": "Remove an element at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getByte",
                    "doc": "Get byte (8-bit integer) value at given index",
                    "returns": {
                        "type": "byte"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setByte",
                    "doc": "Set byte (8-bit integer) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "byte"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addByte",
                    "doc": "Add byte (8-bit integer) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "byte"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getShort",
                    "doc": "Get short (16-bit integer) value at given index",
                    "returns": {
                        "type": "short"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setShort",
                    "doc": "Set short (16-bit integer) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "short"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addShort",
                    "doc": "Add short (16-bit integer) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "short"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getInt",
                    "doc": "Get integer (32-bit integer) value at given index",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setInt",
                    "doc": "Set integer (32-bit integer) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addInt",
                    "doc": "Add integer (32-bit integer) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getLong",
                    "doc": "Get long (64-bit integer) value at given index",
                    "returns": {
                        "type": "long"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setLong",
                    "doc": "Set long (64-bit integer) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "long"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addLong",
                    "doc": "Add long (64-bit integer) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "long"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getFloat",
                    "doc": "Get float (32-bit floating point number) value at given index",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setFloat",
                    "doc": "Set float (32-bit floating point number) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addFloat",
                    "doc": "Add float (32-bit floating point number) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDouble",
                    "doc": "Get double (64-bit floating point number) value at given index",
                    "returns": {
                        "type": "double"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setDouble",
                    "doc": "Set double (64-bit floating point number) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addDouble",
                    "doc": "Add double (64-bit floating point number) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getString",
                    "doc": "Get string value at given index",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setString",
                    "doc": "Set string value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addString",
                    "doc": "Add string value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getBoolean",
                    "doc": "Get boolean (true or false) value at given index",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setBoolean",
                    "doc": "Set boolean (true or false) value at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addBoolean",
                    "doc": "Add boolean (true or false) value at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getCompound",
                    "doc": "Get NBT compound at given index",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setCompound",
                    "doc": "Set NBT compound at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addCompound",
                    "doc": "Add NBT compound at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getList",
                    "doc": "Get NBT list at given index",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setList",
                    "doc": "Set NBT list at given index",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "index",
                            "type": "int"
                        },
                        {
                            "name": "value",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addList",
                    "doc": "Add NBT list at the end of the list",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "toArray",
                    "doc": "Turns a NBT list into a Java array.\n\n \u003cpre\u003e{@code\n     var tag \u003d mappet.createCompound(\"{id:[0,2,4]}\");\n\n     c.send(tag.get(\"id\").toArray()[1]); // 2\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.Object",
                        "doc": "an array of the list\u0027s elements"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.nbt.INBTCompound",
            "doc": "Interface that represents an NBT compound tag",
            "interfaces": [
                "mchorse.mappet.api.scripts.user.nbt.INBT"
            ],
            "methods": [
                {
                    "name": "getNBTTagCompound",
                    "doc": "Get raw NBT tag compound. \u003cb\u003eBEWARE:\u003c/b\u003e you need to know the MCP\n mappings in order to directly call methods on this instance!",
                    "returns": {
                        "type": "NBTTagCompound"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getNBTTagComound",
                    "doc": "Deprecated version of {@link #getNBTTagCompound} to avoid errors\n in existing scripts. Use the other method!",
                    "returns": {
                        "type": "NBTTagCompound"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Deprecated"
                    ]
                },
                {
                    "name": "has",
                    "doc": "Check whether this NBT compound has a value by given key.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "remove",
                    "doc": "Remove a value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "keys",
                    "doc": "Get all keys.",
                    "returns": {
                        "type": "java.util.Set"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getByte",
                    "doc": "Get byte (8-bit integer) value by given key.",
                    "returns": {
                        "type": "byte"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setByte",
                    "doc": "Set byte (8-bit integer) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "byte"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getShort",
                    "doc": "Get short (16-bit integer) value by given key.",
                    "returns": {
                        "type": "short"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setShort",
                    "doc": "Set short (16-bit integer) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "short"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getInt",
                    "doc": "Get integer (32-bit integer) value by given key.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setInt",
                    "doc": "Set integer (32-bit integer) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getLong",
                    "doc": "Get long (64-bit integer) value by given key.",
                    "returns": {
                        "type": "long"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setLong",
                    "doc": "Set long (64-bit integer) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "long"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getFloat",
                    "doc": "Get float (32-bit floating point number) value by given key.",
                    "returns": {
                        "type": "float"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setFloat",
                    "doc": "Set float (32-bit floating point number) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDouble",
                    "doc": "Get double (64-bit floating point number) value by given key.",
                    "returns": {
                        "type": "double"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setDouble",
                    "doc": "Set double (64-bit floating point number) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getString",
                    "doc": "Get string value by given key.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setString",
                    "doc": "Set string value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getBoolean",
                    "doc": "Get boolean (true or false) value by given key.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setBoolean",
                    "doc": "Set boolean (true or false) value by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getCompound",
                    "doc": "Get NBT compound by given key.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setCompound",
                    "doc": "Set NBT compound by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getList",
                    "doc": "Get NBT list by given key.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setList",
                    "doc": "Set NBT list by given key.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "value",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTList"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setNBT",
                    "doc": "Set arbitrary NBT.\n\n \u003cpre\u003e{@code\n    var compound \u003d mappet.createCompound();\n\n    compound.setNBT(\"stack\", \u0027{id:\"minecraft:diamond\",Count:64b}\u0027);\n\n    // {stack:{id:\"minecraft:diamond\",Count:64b}}\n    print(compound.stringify());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "Whether given NBT code was successfully was inserted."
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "nbt",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "get",
                    "doc": "Get the value of in this compound by given key of the raw type. Following\n value types are possible (depending on whatever was found in the compound):\n INBTCompound, INBTList, String, Double, Long, Float, Int, Short, Byte, or\n null if the value is absent by given key.\n\n \u003cpre\u003e{@code\n     var tag \u003d mappet.createCompound(\"{id:\\\"minecraft:diamond_hoe\\\",Count:1b}\");\n\n     c.send(tag.get(\"id\"));\n     c.send(tag.get(\"Count\"));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.Object",
                        "doc": "the value found by that key or null"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String",
                            "doc": "the key of the value"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "equals",
                    "doc": "Check if this compound is equal to given compound (order of keys doesn\u0027t matter).\n\n \u003cpre\u003e{@code\n     var tag1 \u003d mappet.createCompound(\"{id:\\\"minecraft:diamond_hoe\\\",Count:1b}\");\n     var tag2 \u003d mappet.createCompound(\"{Count:1b,id:\\\"minecraft:diamond_hoe\\\"}\");\n\n     c.send(tag1.equals(tag2));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "boolean",
                        "doc": "whether this compound is equal to the given compound"
                    },
                    "arguments": [
                        {
                            "name": "compound",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBTCompound",
                            "doc": "the compound to compare with"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "addCompound",
                    "doc": "Adds a new compound to this compound.\n\n \u003cpre\u003e{@code\n    var tag \u003d mappet.createCompound();\n    tag.addCompound(\"compound\");\n    tag.get(\"compound\").setString(\"x\", \"123\")\n    c.send(tag) //{compound:{x:\"123\"}}\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "dumpJSON",
                    "doc": "Dumps to a JSON String.\n It first replaces the key-value colons with the proper JSON format.\n Then, it creates a pattern to match the desired numeric literals and boolean values.\n It checks if the current matched pattern is \"0b\" or \"1b\"\n and replaces them with \"false\" and \"true\" respectively.\n For the other cases, it removes the last character from the matched pattern,\n effectively removing the type literal.\n\n \u003cpre\u003e{@code\n   var tag \u003d mappet.createCompound(\"{id:\\\"minecraft:diamond_hoe\\\",Count:1b}\");\n   c.send(tag.dumpJSON());\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.scripts.user.nbt.INBT",
            "doc": "Common interface for NBT data types.",
            "interfaces": [],
            "methods": [
                {
                    "name": "isCompound",
                    "doc": "Check whether this NBT data is an NBT compound.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isList",
                    "doc": "Check whether this NBT data is an NBT list.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "stringify",
                    "doc": "Convert this NBT structure to string.",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isEmpty",
                    "doc": "Check whether this NBT tag is empty.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "size",
                    "doc": "Get the size (amount of elements) in this NBT tag.",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "copy",
                    "doc": "Create a copy of this NBT tag.",
                    "returns": {
                        "type": "mchorse.mappet.api.scripts.user.nbt.INBT"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "combine",
                    "doc": "Add given NBT data\u0027s values on top of this one.",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBT"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isSame",
                    "doc": "Check whether given NBT tag is same as this one.",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [
                        {
                            "name": "nbt",
                            "type": "mchorse.mappet.api.scripts.user.nbt.INBT"
                        }
                    ],
                    "annotations": []
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UITrackpadComponent",
            "doc": "Trackpad UI component.\n\n \u003cp\u003eThis component allows users to input numerical values (integer and double),\n with optionally a limit range between min and max. Users can also use\n arrow buttons on the side to increment and decrement the value, and\n type in value manually.\u003c/p\u003e\n\n \u003cp\u003eThe value that gets written to UI context\u0027s data (if ID is present) is\n the number displayed in the field, if integer option is enabled, then an\n integer will be written, or double if it\u0027s disabled.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#trackpad()} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var trackpad \u003d ui.trackpad(5).id(\"number\").limit(0, 25, true);\n\n        trackpad.rxy(0.5, 0.5).wh(160, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"number\")\n        {\n            // If integer wasn\u0027t enabled, you would use:\n            // data.getDouble(\"number\")\n            if (data.getInt(\"number\") \u003d\u003d\u003d 19)\n            {\n                c.getSubject().send(\"21\");\n            }\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "value",
                    "doc": "Set the value that of trackpad component.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "min",
                    "doc": "Set the minimum that this trackpad component can let the user pick.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "min",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "max",
                    "doc": "Set the maximum that this trackpad component can let the user pick.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "max",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "integer",
                    "doc": "Set this trackpad component to accept only whole numbers.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "integer",
                    "doc": "Toggle integer option, when passed \u003ccode\u003etrue\u003c/code\u003e then this trackpad\n component will accept only whole numbers, and when passed \u003ccode\u003efalse\u003c/code\u003e,\n then both whole and floating point numbers can be accepted by this trackpad.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "integer",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "limit",
                    "doc": "Convenience method that allows to set minimum and maximum, i.e. value range,\n that this trackpad field can accept.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "min",
                            "type": "double"
                        },
                        {
                            "name": "max",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "limit",
                    "doc": "Convenience method that allows to set minimum, maximum, and integer options\n that this trackpad field can accept.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "min",
                            "type": "double"
                        },
                        {
                            "name": "max",
                            "type": "double"
                        },
                        {
                            "name": "integer",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "amplitudes",
                    "doc": "Changes the amplitudes of this trackpad fields, i.e. how much value changes when\n moving the cursor horizontally. Weak (\u003ccode\u003eAlt\u003c/code\u003e amplitude gets set 5 times\n weaker than input value, and strong (\u003ccode\u003eShift\u003c/code\u003e) amplitude gets set 5 times\n stronger than input value.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "normal",
                            "type": "double"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "amplitudes",
                    "doc": "Changes the amplitudes of this trackpad fields, i.e. how much value changes when\n moving the cursor horizontally.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "normal",
                            "type": "double",
                            "doc": "Value change per pixel when no modifiers is held."
                        },
                        {
                            "name": "weak",
                            "type": "double",
                            "doc": "Value change per pixel when alt is held."
                        },
                        {
                            "name": "strong",
                            "type": "double",
                            "doc": "Value change per pixel when shift is held."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "increment",
                    "doc": "Changes the incremental value of this trackpad fields, i.e. how much being added\n or subtracted when user presses \u0026lt; and \u0026gt; buttons on the sides of the\n trackpad value.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITrackpadComponent"
                    },
                    "arguments": [
                        {
                            "name": "increment",
                            "type": "double",
                            "doc": "Value change per click on increment buttons."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDefaultUpdateDelay",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIToggleComponent",
            "doc": "Toggle UI component.\n\n \u003cp\u003eThis component allows users to input boolean value (yes/no, true/false,\n \u003ccode\u003e1\u003c/code\u003e/\u003ccode\u003e0\u003c/code\u003e). The value that gets written to UI context\u0027s data\n (if ID is present) is boolean.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#toggle(String)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var trackpad \u003d ui.toggle(\"Show\", false).id(\"toggle\");\n        var label \u003d ui.label(\"You can see this label\").id(\"label\");\n\n        trackpad.rxy(0.5, 0.5).wh(160, 20).anchor(0.5);\n        label.rx(0.5).ry(0.5, 25).wh(160, 20).anchor(0.5).labelAnchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"toggle\")\n        {\n            uiContext.get(\"label\").visible(uiContext.getData().getBoolean(\"toggle\"));\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "state",
                    "doc": "Change component\u0027s toggled state.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"toggle\").state(true);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIToggleComponent"
                    },
                    "arguments": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UITextComponent",
            "doc": "Text UI component.\n\n \u003cp\u003eThis component allows you to input lots of text. This text can have multiple lines\n and Minecraft\u0027s formatting using \"[\" symbol instead of section field. Beside that\n this text component is resizable inside of column and row elements so it should\n work perfectly with layouts.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#text(String)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var scroll \u003d ui.column(5, 10);\n\n        scroll.getCurrent().scroll().rxy(0.5, 0.5).w(200).rh(0.8).anchor(0.5);\n\n        var text \u003d scroll.text(\"Lorem ipsum dolor sit amet,\\n\\n\" +\n            \"consectetur adipiscing elit. Nullam sit amet luctus tellus. Sed posuere, orci quis vehicula mattis, orci nulla malesuada nunc, in mattis mi urna a quam. Mauris malesuada tempus molestie. Pellentesque in est quam. Sed iaculis dictum bibendum. Cras eleifend varius ligula, id luctus arcu ultricies a. Nam tincidunt mauris eu ligula sodales faucibus sed ut eros. Phasellus consectetur nec magna quis fermentum. Donec quis mauris tristique neque suscipit placerat. Etiam id laoreet ante. Maecenas finibus nec augue vitae convallis.\\n\\n\" +\n            \"Donec at tortor nibh. Nunc quis nulla justo. Vestibulum lacinia quis sapien at euismod. Curabitur sed maximus sapien. Fusce sed dui at lectus venenatis volutpat ac ac sapien. Cras at tortor pellentesque, finibus nulla vitae, tristique ligula. Etiam porta elementum justo. Cras facilisis rutrum mauris ac consectetur. Aliquam ipsum dolor, accumsan et lacus malesuada, volutpat pretium odio. Donec sed purus vulputate, auctor nulla in, sagittis ipsum. Nam dolor tortor, consequat sit amet eleifend at, imperdiet at ligula. Aenean blandit sem sit amet ex vehicula consequat. Etiam feugiat condimentum sem, eget imperdiet augue mattis quis.\");\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "textAnchor",
                    "doc": "Change text\u0027s anchor point which determines where text will\n be rendered relative to component\u0027s frame horizontally.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Position the text\u0027s content in the center of its frame\n    uiContext.get(\"text\").textAnchor(0.5);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchor",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UITextboxComponent",
            "doc": "Textbox UI component.\n\n \u003cp\u003eThis component allows users to input a text line (for multi-line input\n use {@link UITextareaComponent} component). This could be used to request\n the player to input names.\u003c/p\u003e\n\n \u003cp\u003eThe value that gets written to UI context\u0027s data (if ID is present) is\n the string that user typed into the component.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#textbox()} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var textbox \u003d ui.textbox().id(\"textbox\").tooltip(\"Enter your name:\");\n\n        textbox.rxy(0.5, 0.5).wh(160, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"textbox\")\n        {\n            c.getSubject().send(\"Your name is: \" + data.getString(\"textbox\"));\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "maxLength",
                    "doc": "Change component\u0027s max length (how many character max can be inputted).\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"textbox\").maxLength(68);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextboxComponent"
                    },
                    "arguments": [
                        {
                            "name": "maxLength",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "noBackground",
                    "doc": "Disable textbox\u0027s background.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"textbox\").noBackground();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextboxComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getDefaultUpdateDelay",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UITextareaComponent",
            "doc": "Text area UI component.\n\n \u003cp\u003eThis component allows users to input multiple lines of text (for single-line\n input use {@link UITextboxComponent} component). This could be used to let players\n input a multi-line description about themselves.\u003c/p\u003e\n\n \u003cp\u003eThe value that gets written to UI context\u0027s data (if ID is present) is\n the multi-line string that user typed into the component.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#textarea(String)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var s \u003d c.getSubject();\n        var story \u003d s.getStates().getString(\"story\");\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var textarea \u003d ui.textarea(story).id(\"textarea\").tooltip(\"Tell us your story...\");\n\n        // Don\u0027t send updates too often, only half a second after the player\n        // stopped typing into a text area\n        textarea.updateDelay(500);\n        textarea.rxy(0.5, 0.5).wh(300, 200).anchor(0.5);\n        s.openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"textarea\")\n        {\n            // Write down the input\n            c.getSubject().getStates().setString(\"story\", data.getString(\"textarea\"));\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "noBackground",
                    "doc": "Disable textarea\u0027s background.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"textarea\").noBackground();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UITextareaComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "getDefaultUpdateDelay",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIStringListComponent",
            "doc": "String list UI component.\n\n \u003cp\u003eThis component allows users to pick a string out of a list of strings\n that you provided.\u003c/p\u003e\n\n \u003cp\u003eThe value that gets written to UI context\u0027s data (if ID is present) is\n the selected string that picked in the list.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#stringList(List)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var s \u003d c.getSubject();\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var strings \u003d ui.stringList([\"Apple\", \"Orange\", \"Pineapple\", \"Avocado\"]).id(\"strings\").tooltip(\"Pick a fruit...\");\n        var label \u003d ui.label(\"...\").id(\"fruit\").visible(false);\n\n        strings.background(0x88000000).rxy(0.5, 0.5).wh(100, 240).anchor(0.5);\n        label.rx(0.5).ry(0.5, -160).anchor(0.5, 0.5);\n        label.background(0x88000000).labelAnchor(0.5, 0.5);\n        s.openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"strings\")\n        {\n            uiContext.get(\"fruit\").label(data.getString(\"strings\")).visible(true);\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "values",
                    "doc": "Replace values within this string list.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Replace values in strings\n    uiContext.get(\"strings\").values(\"Tomato\", \"Cucumber\", \"Pepper\", \"Cabbage\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "values",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "values",
                    "doc": "Replace values within this string list.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    var vegetables \u003d [\"Tomato\", \"Cucumber\", \"Pepper\", \"Cabbage\"];\n\n    // Replace values in strings\n    uiContext.get(\"strings\").values(vegetables);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "values",
                            "type": "java.util.List"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "setValues",
                    "doc": "Replace values within this string list.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    var vegetables \u003d [\"Tomato\", \"Cucumber\", \"Pepper\", \"Cabbage\"];\n\n    // Replace values in strings\n    uiContext.get(\"strings\").setValues(vegetables);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "values",
                            "type": "java.util.List"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getValues",
                    "doc": "Returns values of this string list.\n\n \u003cpre\u003e{@code\n    var values \u003d uiContext.get(\"strings\").getValues();\n    \n    for (var i in values)\n    {\n        c.send(values[i]);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "selected",
                    "doc": "Set the currently selected element.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set first string in the list to be selected\n    uiContext.get(\"strings\").selected(0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "selected",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "background",
                    "doc": "Set component\u0027s solid color background.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set half transparent black background\n    uiContext.get(\"strings\").background();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "background",
                    "doc": "Set component\u0027s solid color background.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set half transparent toxic green background\n    uiContext.get(\"strings\").background(0x8800ff00);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStringListComponent"
                    },
                    "arguments": [
                        {
                            "name": "background",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIStackComponent",
            "doc": "Item stack (slot) UI component.\n\n \u003cp\u003eThis component allows users to input an item stack. The value that gets written\n to UI context\u0027s data (if ID is present) is an NBT compound tag.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#item()} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var stack \u003d ui.item().id(\"stack\").tooltip(\"To dupe an item, please pick that item.\");\n\n        stack.rxy(0.5, 0.5).wh(24, 24).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"stack\")\n        {\n            var item \u003d mappet.createItem(data.getCompound(\"stack\"));\n            var pos \u003d c.getSubject().getPosition();\n\n            c.getWorld().dropItemStack(item, pos.x, pos.y + 2, pos.z);\n\n            // Item stack UI component also includes the slot from which\n            // item was picked from player\u0027s inventory. -1 means it was\n            // picked from elsewhere (from search or pasted into the\n            // field)\n            var slot \u003d data.getInt(\"stack.slot\");\n\n            if (slot \u003e\u003d 0)\n            {\n                // When slot isn\u0027t -1, you can access it from player\u0027s inventory\n                var corresponding \u003d c.getSubject().getInventory().getStack(slot);\n\n                c.send(\"Item \" + corresponding.getMinecraftItemStack() + \" was taken from slot \" + slot);\n            }\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "stack",
                    "doc": "Set item stack component\u0027s item from scripts.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var stack \u003d ui.item().id(\"stack\").tooltip(\"An exhibit D.\", 1);\n\n        stack.rxy(0.5, 0.5).wh(24, 24).anchor(0.5);\n        stack.stack(mappet.createItem(\"minecraft:diamond_sword\"));\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStackComponent"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "mchorse.mappet.api.scripts.user.items.IScriptItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "stack",
                    "doc": "Set item stack component\u0027s item. See the example in {@link #stack(IScriptItemStack)}.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIStackComponent"
                    },
                    "arguments": [
                        {
                            "name": "stack",
                            "type": "ItemStack"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDefaultUpdateDelay",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIParentComponent",
            "doc": "",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "getChildComponents",
                    "doc": "",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIMorphComponent",
            "doc": "Morph UI component.\n\n \u003cp\u003eThis component allows to display a morph. Users can inspect it, but it can also be\n edited, if configured. If you want disable users to turn around the morph by disabling\n user input using {@link UIComponent#enabled(boolean)}.\u003c/p\u003e\n\n \u003cp\u003eIf this component is editable, then the value that gets written to UI context\u0027s data\n (if ID is present) is an NBT compound tag that represents a morph.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#morph(AbstractMorph)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var layout \u003d ui.layout();\n\n        layout.getCurrent().rx(0.5).ry(1).wh(300, 100).anchor(0.5, 1);\n\n        var steve \u003d mappet.createMorph(\"{CustomPose:{Size:[0.6f,1.8f,0.6f],Poses:{right_arm:{P:[-6.0f,-2.0f,0.0f],R:[-83.0f,41.0f,0.0f]},left_leg:{P:[2.0f,-12.0f,0.0f]},right_armwear:{P:[0.0f,-4.0f,0.0f]},outer:{P:[0.0f,4.0f,0.0f]},left_legwear:{P:[0.0f,-6.0f,0.0f]},body:{P:[0.0f,8.0f,0.0f]},bodywear:{P:[0.0f,-6.0f,0.0f]},head:{P:[0.0f,8.0f,0.0f],R:[18.0f,0.0f,9.0f]},left_arm:{P:[6.0f,-2.0f,0.0f]},right_leg:{P:[-2.0f,-12.0f,0.0f]},right_legwear:{P:[0.0f,-6.0f,0.0f]},anchor:{P:[0.0f,16.0f,0.0f]},left_armwear:{P:[0.0f,-4.0f,0.0f]}}},Settings:{Hands:1b},Name:\\\"blockbuster.fred\\\"}\");\n        var morph \u003d layout.morph(steve);\n\n        morph.position(-0.019, 1.5, 0).rotation(-11, 24).distance(1.6).fov(40);\n        morph.enabled(false).wh(100, 100);\n\n        var label \u003d layout.label(\"Steve\").background(0xaa000000);\n\n        label.xy(0, 80).wh(100, 20).labelAnchor(0.5, 0.5);\n\n        var graphics \u003d layout.graphics();\n        var h \u003d 54;\n        var y \u003d 30;\n\n        // Draw the background bubble\n        graphics.xy(100, y).wh(200, 100);\n        graphics.rect(4, 5, 192, h - 12, 0xff000000);\n        graphics.rect(5, 4, 190, h - 10, 0xff000000);\n        graphics.rect(5, 5, 190, h - 12, 0xffffffff);\n        graphics.rect(4, 11, 1, 4, 0xffffffff);\n        graphics.rect(3, 10, 1, 5, 0xff000000);\n        graphics.rect(3, 11, 1, 3, 0xffffffff);\n        graphics.rect(2, 10, 1, 4, 0xff000000);\n        graphics.rect(2, 11, 1, 2, 0xffffffff);\n        graphics.rect(1, 10, 1, 3, 0xff000000);\n        graphics.rect(1, 11, 1, 1, 0xffffffff);\n        graphics.rect(0, 10, 1, 2, 0xff000000);\n        graphics.rect(-1, 10, 1, 1, 0xff000000);\n\n        var text \u003d layout.text(\"Well, hello there! I expected you...\\n\\nMy name is Steve, and yours?\");\n\n        text.color(0x000000, false).xy(110, y + 10).wh(180, 80);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "morph",
                    "doc": "Set display morph.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set Alex morph\n    uiContext.get(\"morph\").morph(mappet.createMorph(\u0027{Name:\"blockbuster.alex\"}\u0027));\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "morph",
                            "type": "AbstractMorph"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "editing",
                    "doc": "Enable an ability for players to pick or edit the morph.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Enable morph editing\n    uiContext.get(\"morph\").editing();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "editing",
                    "doc": "Toggle an ability for players to pick or edit the morph.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Disable morph editing\n    uiContext.get(\"morph\").editing(false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "editing",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "position",
                    "doc": "Change camera\u0027s orbit position in the morph component. The default camera position (\u003ccode\u003e0\u003c/code\u003e,\n \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e).\n\n \u003cp\u003eProTip: you can enable UI debug option in Ctrl + 0 \u0026gt; Mappet, you can position the morph\n after running the script, right click somewhere within its frame, and click Copy camera\n information... context menu item. It will copy the configuration of camera, which you can\n paste into the code.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set camera position\n    uiContext.get(\"morph\").position(0, 1, 0.5);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "float"
                        },
                        {
                            "name": "y",
                            "type": "float"
                        },
                        {
                            "name": "z",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rotation",
                    "doc": "Change camera orbit rotation in the morph component. The default camera rotation (\u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e).\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set camera rotation\n    uiContext.get(\"morph\").rotation(15, 0);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "pitch",
                            "type": "float"
                        },
                        {
                            "name": "yaw",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "distance",
                    "doc": "Change camera distance from camera orbit position in the morph component. The default\n camera distance is \u003ccode\u003e2\u003c/code\u003e.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set camera distance\n    uiContext.get(\"morph\").distance(4);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "distance",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "fov",
                    "doc": "Change camera Field of View in the morph component. The default FOV is \u003ccode\u003e70\u003c/code\u003e.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set camera FOV\n    uiContext.get(\"morph\").fov(50);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIMorphComponent"
                    },
                    "arguments": [
                        {
                            "name": "fov",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDefaultUpdateDelay",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "resetContext",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "createContext",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "menu",
                            "type": "GuiSimpleContextMenu"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UILayoutComponent",
            "doc": "Layout UI component.\n\n \u003cp\u003eThis UI component does nothing, beside managing placement of other\n components. Layout UI component have three different modes upon which\n child components can be placed: column, row, and grid.\u003c/p\u003e\n\n \u003cp\u003eAdditionally, column mode supports scrolling when there are too many\n components within its frame.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#layout()},\n {@link IMappetUIBuilder#column(int)}, {@link IMappetUIBuilder#row(int)}, and\n {@link IMappetUIBuilder#grid(int)} methods.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var column \u003d ui.column(4, 10);\n\n        column.getCurrent().scroll().rxy(0.5, 0.5).w(240).rh(0.8).anchor(0.5);\n\n        var row \u003d column.row(5);\n        var name \u003d row.column(4);\n\n        name.label(\"Name\").h(8);\n        name.textbox().id(\"name\").h(20);\n\n        var lastname \u003d row.column(4);\n\n        lastname.label(\"Last name\").h(8);\n        lastname.textbox().id(\"lastname\").h(20);\n\n        column.toggle(\"I agree to ToS\").id(\"toggle\").h(14);\n        column.text(\"The terms of service are following: you agree that your data will be used by an AI to generate funny cat and dog videos based entirely on your name and lastname.\\n\\nYou also agree to give us your time to view those videos, because we said so.\").color(0xaaaaaa, false).marginTop(8);\n        column.button(\"Oh... a button?\").h(20).marginTop(12);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIParentComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "scroll",
                    "doc": "Enables scrolling. This option works only with {@link IMappetUIBuilder#column(int)}\n layout component.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var column \u003d ui.column(4, 10);\n\n        column.getCurrent().scroll().rxy(0.5, 0.5).wh(200, 200).anchor(0.5);\n\n        column.label(\"Name\").h(8);\n        column.textbox().id(\"name\").h(20);\n        column.label(\"Last name\").h(8);\n        column.textbox().id(\"lastname\").h(20);\n\n        column.toggle(\"I agree to ToS\").id(\"toggle\").h(14);\n        column.text(\"The terms of service are following: you agree that your data will be used by an AI to generate funny cat and dog videos based entirely on your name and lastname.\\n\\nYou also agree to give us your time to view those videos, because we said so.\").color(0xaaaaaa, false).marginTop(8);\n\n        for (var i \u003d 0; i \u003c 10; i++)\n        {\n            column.button(\"Button \" + (i + 1)).h(20);\n        }\n\n        column.text(\"These 10 buttons above demonstrate the ability of this layout element to scroll down.\").marginTop(12);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILayoutComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "scrollSize",
                    "doc": "Set manually scroll size of the layout element. This works only with\n basic {@link IMappetUIBuilder#layout()} component.\n\n \u003cp\u003eIf {@link UILayoutComponent#horizontal()} was enabled earlier,\n then this value will change the max scrollable to width, rather than\n height.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var size \u003d 400;\n\n        var ui \u003d mappet.createUI().background();\n\n        // Demonstration of manual vertical scroll area\n        var vertical \u003d ui.layout();\n\n        vertical.getCurrent().scroll().scrollSize(size).rxy(0.25, 0.5).wh(150, 200).anchor(0.5);\n        vertical.button(\"Top left\").xy(10, 10).wh(100, 20);\n        vertical.button(\"Middle\").rx(0.5, -50).y(size / 2 - 10).wh(100, 20);\n        vertical.button(\"Bottom right\").rx(1, -110).y(size - 30).wh(100, 20);\n\n        ui.label(\"Vertical scroll\").background(0x88000000).rx(0.25).ry(0.5, -120).wh(100, 20).anchorX(0.5).labelAnchor(0.5, 0);\n\n        // Demonstration of manual horizontal scroll area\n        var horizontal \u003d ui.layout();\n\n        horizontal.getCurrent().scroll().horizontal().scrollSize(size).rxy(0.75, 0.5).wh(150, 200).anchor(0.5);\n        horizontal.button(\"Top left\").xy(10, 10).wh(100, 20);\n        horizontal.button(\"Middle\").x(size / 2 - 50).ry(0.5, -10).wh(100, 20);\n        horizontal.button(\"Bottom right\").x(size - 110).ry(1, -30).wh(100, 20);\n\n        ui.label(\"Horizontal scroll\").background(0x88000000).rx(0.75).ry(0.5, -120).wh(100, 20).anchorX(0.5).labelAnchor(0.5, 0);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILayoutComponent"
                    },
                    "arguments": [
                        {
                            "name": "scrollSize",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "horizontal",
                    "doc": "Enables horizontal mode. This usable when {@link UILayoutComponent#scroll()}\n is enabled.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILayoutComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "width",
                    "doc": "Per component width (in pixels) that should be sustained within\n {@link IMappetUIBuilder#grid(int)} layout type. This doesn\u0027t work with any other\n component than grid.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILayoutComponent"
                    },
                    "arguments": [
                        {
                            "name": "width",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "items",
                    "doc": "How many components per row that should be placed within\n {@link IMappetUIBuilder#grid(int)} layout type. This option doesn\u0027t work with\n any other component than grid.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILayoutComponent"
                    },
                    "arguments": [
                        {
                            "name": "items",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UILabelComponent",
            "doc": "Label UI component.\n\n \u003cp\u003eThis component allows you to input one line of text. You can use Minecraft\u0027s\n formatting using \"[\" symbol instead of section field.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#label(String)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI().background();\n        var label \u003d ui.label(\"Welcome, [l\" + c.getSubject().getName() + \"[r!\");\n\n        label.rxy(0.5, 0.5).wh(100, 20).anchor(0.5);\n        label.color(0x00ee22).background(0x88000000).labelAnchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "background",
                    "doc": "Change background color of this label component by providing hex ARGB.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Add a half transparent black background\n    uiContext.get(\"label\").background(0x88000000);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelComponent"
                    },
                    "arguments": [
                        {
                            "name": "background",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "labelAnchor",
                    "doc": "Change text\u0027s anchor point which determines where text will be rendered\n relative to component\u0027s frame both vertically and horizontally.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Position the label\u0027s text in the middle of its frame\n    uiContext.get(\"label\").labelAnchor(0.5);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchor",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "labelAnchor",
                    "doc": "Change text\u0027s anchor point which determines where text will be rendered\n relative to component\u0027s frame, with separate vertical and horizontal\n anchors.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Position the label\u0027s text in the middle only vertically\n    uiContext.get(\"label\").labelAnchor(0, 0.5);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchorX",
                            "type": "float"
                        },
                        {
                            "name": "anchorY",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "doc": "",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "color",
                    "doc": "Change text color of this component by providing hex RGB.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set label\u0027s text color to toxic green\n    uiContext.get(\"component\").color(0x00ff00);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelBaseComponent"
                    },
                    "arguments": [
                        {
                            "name": "color",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "color",
                    "doc": "Change text color of this component by providing hex RGB.\n Optionally enable text shadow.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Set label\u0027s text color to black (and without text shadow)\n    uiContext.get(\"component\").color(0x000000, false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelBaseComponent"
                    },
                    "arguments": [
                        {
                            "name": "color",
                            "type": "int"
                        },
                        {
                            "name": "shadow",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "label",
                    "doc": "Set label for label, toggle and text UI components, or change\n the input value for textbox and textarea components.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n\n    // Assuming that title is a label UI component\n    uiContext.get(\"title\").label(\"Application form\");\n\n    // Assuming that prerequisites is a text UI component\n    uiContext.get(\"prerequisites\").label(\"This is an application form for enrolling into H.P. Lovecraft\u0027s book club.\\n\\n* - are required fields\");\n\n    // Assuming that fullname is a textbox UI component\n    uiContext.get(\"fullname\").label(\"John Smith\");\n\n    // Assuming that description is a textarea UI component\n    uiContext.get(\"description\").label(\"I\u0027m John Smith, I\u0027m from Alaska, and I like fishing.\");\n\n    // Assuming that adult is a toggle UI component\n    uiContext.get(\"adult\").label(\"Adult\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UILabelBaseComponent"
                    },
                    "arguments": [
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getLabel",
                    "doc": "",
                    "returns": {
                        "type": "java.lang.String"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "apply",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIIconButtonComponent",
            "doc": "Clickable icon button component.\n\n \u003cp\u003eThis component displays an icon, which allows users to trigger the handler\n script. The value that gets written to UI context\u0027s data (if ID is present)\n is how many times the icon button was pressed.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#icon(String)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.icon(\"more\").id(\"icon\");\n\n        button.rxy(0.5, 0.5).wh(20, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"icon\")\n        {\n            // Get a set of all icons\n            var icons \u003d Java.type(\"mchorse.mclib.client.gui.utils.IconRegistry\").icons.keySet();\n\n            // Set a random icon\n            var index \u003d Math.floor(Math.random() * icons.size());\n            var i \u003d 0;\n\n            for each (var icon in icons)\n            {\n                if (i \u003d\u003d index)\n                {\n                    uiContext.get(\"icon\").icon(icon);\n\n                    break;\n                }\n\n                i +\u003d 1;\n            }\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "icon",
                    "doc": "Change icon component\u0027s icon.\n\n \u003cp\u003eYou can find out all available icons by entering following line into\n Mappet\u0027s REPL (it returns a Java Set):\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    Java.type(\"mchorse.mclib.client.gui.utils.IconRegistry\").icons.keySet()\n }\u003c/pre\u003e\n\n \u003cp\u003eSo using that piece of code, you can get create a GUI that shows\n every icon with a tooltip:\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var icons \u003d Java.type(\"mchorse.mclib.client.gui.utils.IconRegistry\").icons.keySet();\n\n        var grid \u003d ui.grid(5);\n\n        grid.getCurrent().width(20).rxy(0.5, 0.5).w(245).anchor(0.5);\n\n        for each (var icon in icons)\n        {\n            grid.icon(icon).wh(20, 20).tooltip(\"Icon\u0027s ID: \" + icon);\n        }\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e\n\n \u003cp\u003eA basic example:\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"icon\").icon(\"gear\");\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIIconButtonComponent"
                    },
                    "arguments": [
                        {
                            "name": "icon",
                            "type": "java.lang.String",
                            "doc": "The icon\u0027s ID."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "isDataReserved",
                    "doc": "",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIGraphicsComponent",
            "doc": "Graphics UI component.\n\n \u003cp\u003eThis component allows drawing solid colored rectangles, gradient rectangles,\n images loaded through Minecraft\u0027s texture manager, text and McLib icons. Think\n of it as a very primitive canvas implementation.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#graphics()} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n\n        // Background rendering\n        var back \u003d ui.graphics().rx(0.5, -150).ry(1, -250).wh(300, 250);\n        var icons \u003d Java.type(\"mchorse.mclib.client.gui.utils.IconRegistry\").icons.keySet();\n\n        back.shadow(80, 80, 300 - 160, 250 - 160, 0x88ff1493, 0x00ff1493, 80);\n        back.shadow(80, 80, 300 - 160, 250 - 160, 0x880088ff, 0x000088ff, 40);\n\n        for each (var icon in icons)\n        {\n            var x \u003d Math.random() * 280 + 10;\n            var y \u003d Math.random() * 230 + 10;\n\n            back.icon(icon, x - 1, y - 1, 0xff000000 + Math.random() * 0xffffff);\n        }\n\n        // Draw my favorite \"me\"\n        var m \u003d mappet.createMorph(\"{Skin:\\\"blockbuster:textures/entity/mchorse/skin.png\\\",CustomPose:{Size:[0.6f,1.8f,0.6f],Poses:{right_arm:{P:[-6.0f,-2.0f,0.0f],R:[-90.0f,-31.0f,0.0f]},left_leg:{P:[2.0f,-12.0f,0.0f]},right_armwear:{P:[0.0f,-4.0f,0.0f]},outer:{P:[0.0f,4.0f,0.0f]},left_legwear:{P:[0.0f,-6.0f,0.0f]},body:{P:[0.0f,8.0f,0.0f],R:[0.0f,-29.0f,0.0f]},bodywear:{P:[0.0f,-6.0f,0.0f]},head:{P:[0.0f,8.0f,0.0f],R:[7.0f,-51.0f,0.0f]},left_arm:{P:[6.0f,-2.0f,0.0f]},right_leg:{P:[-2.0f,-12.0f,0.0f]},right_legwear:{P:[0.0f,-6.0f,0.0f]},anchor:{P:[0.0f,16.0f,0.0f]},left_armwear:{P:[0.0f,-4.0f,0.0f]}}},BodyParts:[{Limb:\\\"head\\\",Morph:{Settings:{Hands:1b},Name:\\\"blockbuster.mchorse/head\\\"}}],Settings:{Hands:1b},Name:\\\"blockbuster.fred_3d\\\"}\");\n        var morph \u003d ui.morph(m).id(\"icon\");\n\n        morph.rx(0.5, -150).ry(1, -250).wh(300, 250).position(-0.017, 1.367, 0).rotation(0, 0).distance(2.2).fov(40).enabled(false);\n\n        // Draw foreground\n        var graphics \u003d ui.graphics().rx(0.5, -150).ry(1, -250).wh(300, 250);\n\n        // Draw small rectangles\n        for (var i \u003d 0; i \u003c 100; i++)\n        {\n            var x \u003d Math.random() * 280 + 10;\n            var y \u003d Math.random() * 230 + 10;\n\n            graphics.rect(x - 1, y - 1, 2, 2, 0x88000000 + Math.random() * 0xffffff);\n        }\n\n        graphics.gradient(0, 210, 300, 40, 0x00ff0000, 0xffff0000);\n        // This is Thanos\u0027 infinity gauntlet. just sayin in case it gets removed xd\n        graphics.image(\"https://i.pinimg.com/originals/6d/5a/99/6d5a99fa0f01dff1dd5de5e3b8244f8d.png\", 0, 75, 55, 100);\n        graphics.text(\"McThanos\", 120, 230, 0xffffff);\n\n        ui.label(\"Graphic Design is my passion\").color(0x00ff00).background(0x88000000).rxy(0.5, 0.25).wh(100, 20).anchor(0.5).labelAnchor(0.5);\n\n        c.getSubject().openUI(ui);\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "removeAll",
                    "doc": "",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIGraphicsComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "rect",
                    "doc": "Draw a solid colored rectangle.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB color that fills the rectangle."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rect",
                    "doc": "Draw a solid colored rectangle relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int",
                            "doc": "Width of the rectangle."
                        },
                        {
                            "name": "h",
                            "type": "int",
                            "doc": "Height of the rectangle."
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB color that fills the rectangle."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "gradient",
                    "doc": "Draw a vertical gradient rectangle.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "primary",
                            "type": "int",
                            "doc": "ARGB color that fills top part of the gradient."
                        },
                        {
                            "name": "secondary",
                            "type": "int",
                            "doc": "ARGB color that fills bottom part of the gradient."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "gradient",
                    "doc": "Draw a vertical/horizontal gradient rectangle.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "primary",
                            "type": "int",
                            "doc": "ARGB color that fills top part of the gradient."
                        },
                        {
                            "name": "secondary",
                            "type": "int",
                            "doc": "ARGB color that fills bottom part of the gradient."
                        },
                        {
                            "name": "horizontal",
                            "type": "boolean",
                            "doc": "Whether gradient is horizontal (\u003ccode\u003etrue\u003c/code\u003e) or vertical (\u003ccode\u003efalse\u003c/code\u003e)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "gradient",
                    "doc": "Draw a vertical gradient rectangle relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int",
                            "doc": "Width of the rectangle."
                        },
                        {
                            "name": "h",
                            "type": "int",
                            "doc": "Height of the rectangle."
                        },
                        {
                            "name": "primary",
                            "type": "int",
                            "doc": "ARGB color that fills top part of the gradient."
                        },
                        {
                            "name": "secondary",
                            "type": "int",
                            "doc": "ARGB color that fills bottom part of the gradient."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "gradient",
                    "doc": "Draw a gradient rectangle relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int",
                            "doc": "Width of the rectangle."
                        },
                        {
                            "name": "h",
                            "type": "int",
                            "doc": "Height of the rectangle."
                        },
                        {
                            "name": "primary",
                            "type": "int",
                            "doc": "ARGB color that fills top or left part of the gradient."
                        },
                        {
                            "name": "secondary",
                            "type": "int",
                            "doc": "ARGB color that fills bottom or right part of the gradient."
                        },
                        {
                            "name": "horizontal",
                            "type": "boolean",
                            "doc": "Whether gradient is horizontal (\u003ccode\u003etrue\u003c/code\u003e) or vertical (\u003ccode\u003efalse\u003c/code\u003e)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "image",
                    "doc": "Draw an image.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "image",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "textureWidth",
                            "type": "int"
                        },
                        {
                            "name": "textureHeight",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "image",
                    "doc": "Draw an image.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "image",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "textureWidth",
                            "type": "int"
                        },
                        {
                            "name": "textureHeight",
                            "type": "int"
                        },
                        {
                            "name": "primary",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "image",
                    "doc": "Draw an image relative to graphics component\u0027s frame.\n\n \u003cp\u003eImage argument is a so called \"resource location.\" For example, if you want\n to draw pig\u0027s skin on the screen you can input \"minecraft:textures/entity/pig/pig.png\"\n and it will draw it on the screen.\u003c/p\u003e\n\n \u003cp\u003eIf you have Blockbuster enabled, it can also display images from internet\n by inputting image\u0027s URL. Although, sometimes it won\u0027t work due to incorrect headers\n that doesn\u0027t identify a web-browser.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "image",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int"
                        },
                        {
                            "name": "h",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "image",
                    "doc": "Draw an image relative to graphics component\u0027s frame with known texture size.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "image",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int"
                        },
                        {
                            "name": "h",
                            "type": "int"
                        },
                        {
                            "name": "textureWidth",
                            "type": "int"
                        },
                        {
                            "name": "textureHeight",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "image",
                    "doc": "Draw an image relative to graphics component\u0027s frame with known texture size and color.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "image",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int"
                        },
                        {
                            "name": "h",
                            "type": "int"
                        },
                        {
                            "name": "textureWidth",
                            "type": "int"
                        },
                        {
                            "name": "textureHeight",
                            "type": "int"
                        },
                        {
                            "name": "primary",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "text",
                    "doc": "Draw a text label relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB text\u0027s font color."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "text",
                    "doc": "Draw a text label with an anchor relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB text\u0027s font color."
                        },
                        {
                            "name": "anchorX",
                            "type": "float",
                            "doc": "Horizontal anchor (\u003ccode\u003e0..1\u003c/code\u003e)."
                        },
                        {
                            "name": "anchorY",
                            "type": "float",
                            "doc": "Vertical anchor (\u003ccode\u003e0..1\u003c/code\u003e)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "text",
                    "doc": "Draw a text label with an anchor relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "text",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int"
                        },
                        {
                            "name": "h",
                            "type": "int"
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB text\u0027s font color."
                        },
                        {
                            "name": "anchorX",
                            "type": "float",
                            "doc": "Horizontal anchor (\u003ccode\u003e0..1\u003c/code\u003e)."
                        },
                        {
                            "name": "anchorY",
                            "type": "float",
                            "doc": "Vertical anchor (\u003ccode\u003e0..1\u003c/code\u003e)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "icon",
                    "doc": "Draw a McLib icon relative to graphics component\u0027s frame.\n\n \u003cp\u003eMost of the icons are \u003ccode\u003e16x16\u003c/code\u003e so keep that in mind.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "icon",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB color that used to render an icon."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "icon",
                    "doc": "Draw a McLib icon with an anchor relative to graphics component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "icon",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "ARGB color that used to render an icon."
                        },
                        {
                            "name": "anchorX",
                            "type": "float",
                            "doc": "Horizontal anchor (\u003ccode\u003e0..1\u003c/code\u003e)."
                        },
                        {
                            "name": "anchorY",
                            "type": "float",
                            "doc": "Vertical anchor (\u003ccode\u003e0..1\u003c/code\u003e)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "shadow",
                    "doc": "Draw a drop shadow.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "primary",
                            "type": "int",
                            "doc": "ARGB color that fills inside."
                        },
                        {
                            "name": "secondary",
                            "type": "int",
                            "doc": "ARGB color that fills outside."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Fading shadow\u0027s distance from the given box using \u003ccode\u003ex\u003c/code\u003e,\n               \u003ccode\u003ey\u003c/code\u003e, \u003ccode\u003ew\u003c/code\u003e, and \u003ccode\u003eh\u003c/code\u003e arguments."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "shadow",
                    "doc": "Draw a drop shadow.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        },
                        {
                            "name": "w",
                            "type": "int",
                            "doc": "Width of the rectangle."
                        },
                        {
                            "name": "h",
                            "type": "int",
                            "doc": "Height of the rectangle."
                        },
                        {
                            "name": "primary",
                            "type": "int",
                            "doc": "ARGB color that fills inside."
                        },
                        {
                            "name": "secondary",
                            "type": "int",
                            "doc": "ARGB color that fills outside."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Fading shadow\u0027s distance from the given box using \u003ccode\u003ex\u003c/code\u003e,\n               \u003ccode\u003ey\u003c/code\u003e, \u003ccode\u003ew\u003c/code\u003e, and \u003ccode\u003eh\u003c/code\u003e arguments."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIComponent",
            "doc": "Base UI component.\n\n \u003cp\u003eEvery UI component in UI API is based off this base component, and therefore\n they have all of the methods available for changing ID, margins, frame (x, y,\n width, and height), tooltip, visibility, enabled, keybinds and update delay.\u003c/p\u003e",
            "superclass": "java.lang.Object",
            "interfaces": [],
            "methods": [
                {
                    "name": "id",
                    "doc": "Set the ID of the component.\n\n \u003cp\u003eWithout ID, the data that can be inputted by players won\u0027t be sent\n into the script handler, so it is \u003cb\u003erequired\u003c/b\u003e to set component\u0027s\n ID if you want to receive the data from the component.\u003c/p\u003e\n\n \u003cp\u003e\u003cb\u003eBEWARE\u003c/b\u003e: multiple components must not share same ID, if they will\n it will certainly cause bugs in the data that you\u0027ll be receiving from the\n client and the way you retrieve components using {@link IMappetUIContext#get(String)}.\u003c/p\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "id",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "tooltip",
                    "doc": "Set a tooltip that will be displayed at the bottom of component\u0027s frame.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "tooltip",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "tooltip",
                    "doc": "Set a tooltip that will be displayed at specified side of component\u0027s frame.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"component\").tooltip(\"Enter your full name\", 1);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "tooltip",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "direction",
                            "type": "int",
                            "doc": "\u003ccode\u003e0\u003c/code\u003e is bottom.\n                  \u003ccode\u003e1\u003c/code\u003e is top.\n                  \u003ccode\u003e2\u003c/code\u003e is right.\n                  \u003ccode\u003e3\u003c/code\u003e is left."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "visible",
                    "doc": "Set component\u0027s visibility. Hiding components also disables any user input,\n i.e. despite button being invisible, it can\u0027t be clicked.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"button\").visible(false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "visible",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "enabled",
                    "doc": "Toggle component\u0027s user input. When the component is disabled, it can\u0027t\n receive any user input: no inputting text into or focusing textbox and\n textareas, no clicking on click area, icon button, or button, etc.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"button\").enabled(false);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "enabled",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "margin",
                    "doc": "Set margin to all sides.\n\n \u003cp\u003e\u003cb\u003eIMPORTANT\u003c/b\u003e: margins affect positioning only within layout component.\n They do absolutely nothing outside of column, row and grid layout components.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"button\").margin(10);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "marginTop",
                    "doc": "Set top margin. See {@link #margin(int)} method for more information about\n restrictions.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "marginBottom",
                    "doc": "Set bottom margin. See {@link #margin(int)} method for more information\n about restrictions.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "marginLeft",
                    "doc": "Set left margin. See {@link #margin(int)} method for more information about\n restrictions.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "marginRight",
                    "doc": "Set right margin. See {@link #margin(int)} method for more information about\n restrictions.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "margin",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "keybind",
                    "doc": "Add a keybind with no modifiers. See {@link #keybind(int, String, String, boolean, boolean)} for proper example.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "keyCode",
                            "type": "int"
                        },
                        {
                            "name": "action",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "keybind",
                    "doc": "Add a keybind with optional Control modifier.\n See {@link #keybind(int, String, String, boolean, boolean)} for proper example.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "keyCode",
                            "type": "int"
                        },
                        {
                            "name": "action",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "ctrl",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "keybind",
                    "doc": "Add a keybind with optional Control and/or Shift modifier(s).\n See {@link #keybind(int, String, String, boolean, boolean)} for proper example.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "keyCode",
                            "type": "int"
                        },
                        {
                            "name": "action",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "ctrl",
                            "type": "boolean"
                        },
                        {
                            "name": "shift",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "keybind",
                    "doc": "Add a keybind optionally with Control, Shift, and Alt key modifiers (i.e. while holding).\n\n \u003cpre\u003e{@code\n    // For more reference, check this page to find the list of all key codes:\n    // https://minecraft.fandom.com/wiki/Key_codes/Keyboard1\n    //\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.icon(\"upload\").id(\"icon\");\n\n        // 203 \u003d Arrow left\n        ui.getCurrent().keybind(203, \"left\", \"Change icon to left\");\n        // 205 \u003d Arrow right\n        ui.getCurrent().keybind(205, \"right\", \"Change icon to right\");\n        button.rxy(0.5, 0.5).wh(20, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var key \u003d uiContext.getHotkey();\n\n        if (key \u003d\u003d\u003d \"left\")\n        {\n            uiContext.get(\"icon\").icon(\"leftload\");\n        }\n        else if (key \u003d\u003d\u003d \"right\")\n        {\n            uiContext.get(\"icon\").icon(\"rightload\");\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "keyCode",
                            "type": "int"
                        },
                        {
                            "name": "action",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "label",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "ctrl",
                            "type": "boolean"
                        },
                        {
                            "name": "shift",
                            "type": "boolean"
                        },
                        {
                            "name": "alt",
                            "type": "boolean"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "context",
                    "doc": "Add a context menu item.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "icon",
                            "type": "java.lang.String",
                            "doc": "Icon ID (see {@link UIIconButtonComponent})."
                        },
                        {
                            "name": "action",
                            "type": "java.lang.String",
                            "doc": "Action ID that will be used for handling with {@link IMappetUIContext#getContext()}."
                        },
                        {
                            "name": "label",
                            "type": "java.lang.String",
                            "doc": "Label that will be displayed in the context menu item."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "context",
                    "doc": "Add a context menu item.\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var label \u003d ui.label(\"Hello!\").id(\"label\").tooltip(\"Right click me...\");\n\n        label.rxy(0.5, 0.5).wh(160, 20).anchor(0.5).labelAnchor(0.5);\n        label.context(\"bubble\", \"a\", \"How are you?\");\n        label.context(\"remove\", \"b\", \"...\", 0xff0033);\n\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"textbox\")\n        {\n            c.getSubject().send(\"Your name is: \" + data.getString(\"textbox\"));\n        }\n\n        var item \u003d uiContext.getContext();\n\n        if (item \u003d\u003d\u003d \"a\")\n        {\n            uiContext.get(\"label\").label(\"I\u0027m fine, and you?\");\n        }\n        else if (item \u003d\u003d\u003d \"b\")\n        {\n            uiContext.get(\"label\").label(\"\");\n        }\n    }\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "icon",
                            "type": "java.lang.String",
                            "doc": "Icon ID (see {@link UIIconButtonComponent})."
                        },
                        {
                            "name": "action",
                            "type": "java.lang.String",
                            "doc": "Action ID that will be used for handling with {@link IMappetUIContext#getContext()}."
                        },
                        {
                            "name": "label",
                            "type": "java.lang.String",
                            "doc": "Label that will be displayed in the context menu item."
                        },
                        {
                            "name": "color",
                            "type": "int",
                            "doc": "Background color highlight (in RGB hex format)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "x",
                    "doc": "Set X in pixels relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rx",
                    "doc": "Set X relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully left, and \u003ccode\u003e1\u003c/code\u003e is fully right.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rx",
                    "doc": "Set X relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully left, and \u003ccode\u003e1\u003c/code\u003e is fully right.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage how far into X."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "y",
                    "doc": "Set Y in pixels relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "ry",
                    "doc": "Set Y relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully top, and \u003ccode\u003e1\u003c/code\u003e is fully bottom.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "ry",
                    "doc": "Set Y relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully top, and \u003ccode\u003e1\u003c/code\u003e is fully bottom.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage how far into Y."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "w",
                    "doc": "Set width in pixels.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rw",
                    "doc": "Set width relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s width, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component width.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rw",
                    "doc": "Set width relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s width, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component width.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage of how wide relative to parent component."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "h",
                    "doc": "Set height in pixels.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rh",
                    "doc": "Set height relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s height, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component height.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rh",
                    "doc": "Set height relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s height, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component height.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage of how tall relative to parent component."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "xy",
                    "doc": "Set X and Y in pixels relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rxy",
                    "doc": "Set X and Y in pixels in percentage relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "float"
                        },
                        {
                            "name": "y",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "wh",
                    "doc": "Set width and height in pixels.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "w",
                            "type": "int"
                        },
                        {
                            "name": "h",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rwh",
                    "doc": "Set relative width and height in percentage relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "w",
                            "type": "float"
                        },
                        {
                            "name": "h",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchor",
                    "doc": "Set horizontal and vertical alignment anchor.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchor",
                            "type": "float",
                            "doc": "Horizontal and vertical anchor."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchor",
                    "doc": "Set horizontal and vertical alignment anchor.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchorX",
                            "type": "float",
                            "doc": "Horizontal anchor."
                        },
                        {
                            "name": "anchorY",
                            "type": "float",
                            "doc": "Vertical anchor."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchorX",
                    "doc": "Set horizontal alignment anchor.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchor",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchorY",
                    "doc": "Set vertical alignment anchor.",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "anchor",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "updateDelay",
                    "doc": "Set update delay in milliseconds (\u003ccode\u003e1000\u003c/code\u003e \u003d \u003ccode\u003e1\u003c/code\u003e second).\n\n \u003cp\u003eUpdate delay allows to limit how frequently data gets sent from the client\n to the hanlder script.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    // Assuming that ui is a IMappetUIBuilder\n\n    // Change text box\u0027s update delay to 1 second meaning\n    // that a second after user didn\u0027t type anything into\n    // the text box it will send all the data to the handler script\n    ui.textbox().id(\"name\").updateDelay(1000);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIComponent"
                    },
                    "arguments": [
                        {
                            "name": "updateDelay",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "getDefaultUpdateDelay",
                    "doc": "",
                    "returns": {
                        "type": "int"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "apply",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyKeybinds",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "isDataReserved",
                    "doc": "",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "resetContext",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "SideOnly"
                    ]
                },
                {
                    "name": "createContext",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "menu",
                            "type": "GuiSimpleContextMenu"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "SideOnly"
                    ]
                },
                {
                    "name": "change",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "properties",
                            "type": "java.lang.String"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "clearChanges",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "getChanges",
                    "doc": "",
                    "returns": {
                        "type": "java.util.Set"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "handleChanges",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "changes",
                            "type": "NBTTagCompound"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "getChildComponents",
                    "doc": "",
                    "returns": {
                        "type": "java.util.List"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "NBTTagCompound"
                    },
                    "arguments": [],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIClickComponent",
            "doc": "Click area component.\n\n \u003cp\u003eThis component doesn\u0027t display anything but rather acts as a special\n user input field. When an ID is assigned and users clicks on the component\u0027s\n bounds, this component will be sending a NBT list containing 5 floats:\u003c/p\u003e\n\n \u003cul\u003e\n     \u003cli\u003eIndex \u003ccode\u003e0\u003c/code\u003e \u003d X coordinate relative to click area\u0027s frame.\u003c/li\u003e\n     \u003cli\u003eIndex \u003ccode\u003e1\u003c/code\u003e \u003d Y coordinate relative to click area\u0027s frame.\u003c/li\u003e\n     \u003cli\u003eIndex \u003ccode\u003e2\u003c/code\u003e \u003d X factor (0..1) how far into the click area\u0027s width (\u003ccode\u003e0\u003c/code\u003e being left edge, \u003ccode\u003e1\u003c/code\u003e being the right edge).\u003c/li\u003e\n     \u003cli\u003eIndex \u003ccode\u003e3\u003c/code\u003e \u003d Y factor (0..1) how far into the click area\u0027s height (\u003ccode\u003e0\u003c/code\u003e being top edge, \u003ccode\u003e1\u003c/code\u003e being the bottom edge).\u003c/li\u003e\n     \u003cli\u003eIndex \u003ccode\u003e4\u003c/code\u003e \u003d Mouse button (\u003ccode\u003e0\u003c/code\u003e is left button, \u003ccode\u003e1\u003c/code\u003e is right button, \u003ccode\u003e2\u003c/code\u003e is middle button, etc.).\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#click()} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var click \u003d ui.click().id(\"click\");\n        var backdrop \u003d ui.graphics().id(\"backdrop\");\n\n        backdrop.rxy(0.5, 0.5).wh(300, 150).anchor(0.5);\n        backdrop.rect(0, 0, 300, 150, 0x88000000);\n        click.rxy(0.5, 0.5).wh(300, 150).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n        var data \u003d uiContext.getData();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"click\")\n        {\n            // Math.floor just in case there are precision issues\n            var list \u003d data.getList(\"click\");\n            var x \u003d Math.floor(list.getFloat(0));\n            var y \u003d Math.floor(list.getFloat(1));\n            var fx \u003d list.getFloat(2);\n            var fy \u003d list.getFloat(3);\n            var button \u003d Math.floor(list.getFloat(4));\n\n            // Draw random rectangle on the back drop\n            if (button \u003d\u003d\u003d 0)\n            {\n                var backdrop \u003d uiContext.get(\"backdrop\");\n\n                backdrop.rect(x - 10, y - 10, 20, 20, 0xff000000 + Math.floor(Math.random() * 0xffffff));\n            }\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UIComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.api.ui.components.UIButtonComponent",
            "doc": "Clickable button component.\n\n \u003cp\u003eThis component displays a flat colored box with a label on top, which\n allows users to trigger the handler script. The value that gets written\n to UI context\u0027s data (if ID is present) is how many times the button\n was pressed.\u003c/p\u003e\n\n \u003cp\u003eThis component can be created using {@link IMappetUIBuilder#button(String)} method.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.button(\"Start...\").id(\"button\");\n\n        button.rxy(0.5, 0.5).wh(160, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var uiContext \u003d c.getSubject().getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"button\")\n        {\n            var data \u003d uiContext.getData();\n            var pressed \u003d data.getInt(\"button\");\n\n            if (pressed \u003e\u003d 100)\n            {\n                c.send(\"We have a winner!\");\n            }\n\n            uiContext.get(\"button\").label(\"You pressed: \" + pressed);\n        }\n    }\n }\u003c/pre\u003e",
            "superclass": "mchorse.mappet.api.ui.components.UILabelBaseComponent",
            "interfaces": [],
            "methods": [
                {
                    "name": "background",
                    "doc": "Change button\u0027s background color by providing hex RGB.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"button\").background(0x00ff00);\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIButtonComponent"
                    },
                    "arguments": [
                        {
                            "name": "background",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "noBackground",
                    "doc": "Disable button\u0027s background.\n\n \u003cpre\u003e{@code\n    // Assuming that uiContext is a IMappetUIContext\n    uiContext.get(\"button\").noBackground();\n }\u003c/pre\u003e",
                    "returns": {
                        "type": "mchorse.mappet.api.ui.components.UIButtonComponent"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "isDataReserved",
                    "doc": "",
                    "returns": {
                        "type": "boolean"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "applyProperty",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        },
                        {
                            "name": "key",
                            "type": "java.lang.String"
                        },
                        {
                            "name": "element",
                            "type": "GuiElement"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "create",
                    "doc": "",
                    "returns": {
                        "type": "GuiElement"
                    },
                    "arguments": [
                        {
                            "name": "mc",
                            "type": "Minecraft"
                        },
                        {
                            "name": "context",
                            "type": "mchorse.mappet.api.ui.UIContext"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "populateData",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.TextGraphic",
            "doc": "",
            "superclass": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "interfaces": [],
            "methods": [
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.ShadowGraphic",
            "doc": "",
            "superclass": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "interfaces": [],
            "methods": [
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.RectGraphic",
            "doc": "",
            "superclass": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "interfaces": [],
            "methods": [
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.ImageGraphic",
            "doc": "",
            "superclass": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "interfaces": [],
            "methods": [
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.IconGraphic",
            "doc": "",
            "superclass": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "interfaces": [],
            "methods": [
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "doc": "Graphic element.\n\n \u003cp\u003eThis is a base interface for all graphic elements that are being constructed\n by {@link UIGraphicsComponent}. Besides storing extra information per a type of\n graphic, every graphic has position and relative measurements (just like\n {@link UIComponent} has).\u003c/p\u003e",
            "superclass": "java.lang.Object",
            "interfaces": [],
            "methods": [
                {
                    "name": "fromNBT",
                    "doc": "",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "toNBT",
                    "doc": "",
                    "returns": {
                        "type": "NBTTagCompound"
                    },
                    "arguments": [
                        {
                            "name": "graphic",
                            "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "x",
                    "doc": "Set X in pixels relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rx",
                    "doc": "Set X relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully left, and \u003ccode\u003e1\u003c/code\u003e is fully right.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rx",
                    "doc": "Set X relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully left, and \u003ccode\u003e1\u003c/code\u003e is fully right.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage how far into X."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "y",
                    "doc": "Set Y in pixels relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "ry",
                    "doc": "Set Y relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully top, and \u003ccode\u003e1\u003c/code\u003e is fully bottom.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "ry",
                    "doc": "Set Y relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is fully top, and \u003ccode\u003e1\u003c/code\u003e is fully bottom.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage how far into Y."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "w",
                    "doc": "Set width in pixels.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rw",
                    "doc": "Set width relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s width, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component width.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rw",
                    "doc": "Set width relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s width, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component width.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage of how wide relative to parent component."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "h",
                    "doc": "Set height in pixels.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rh",
                    "doc": "Set height relative in percents to parent component. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s height, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component height.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rh",
                    "doc": "Set height relative in percents to parent component with offset. Passed value should be\n \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is element will be \u003ccode\u003e0%\u003c/code\u003e of\n parent component\u0027s height, and \u003ccode\u003e1\u003c/code\u003e is \u003ccode\u003e100%\u003c/code\u003e of parent\u0027s\n component height.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "value",
                            "type": "float",
                            "doc": "Percentage of how tall relative to parent component."
                        },
                        {
                            "name": "offset",
                            "type": "int",
                            "doc": "Offset in pixels (can be negative)."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "xy",
                    "doc": "Set X and Y in pixels relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "int"
                        },
                        {
                            "name": "y",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rxy",
                    "doc": "Set X and Y in pixels in percentage relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "float"
                        },
                        {
                            "name": "y",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "wh",
                    "doc": "Set width and height in pixels.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "w",
                            "type": "int"
                        },
                        {
                            "name": "h",
                            "type": "int"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "rwh",
                    "doc": "Set relative width and height in percentage relative to parent component.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "w",
                            "type": "float"
                        },
                        {
                            "name": "h",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchor",
                    "doc": "Set both X and Y anchor point of this graphic object.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "anchor",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchor",
                    "doc": "Set X and Y anchor point of this graphic object individually.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "float"
                        },
                        {
                            "name": "y",
                            "type": "float"
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchorX",
                    "doc": "Set X anchor point of this graphic object.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "x",
                            "type": "float",
                            "doc": "A factor \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is the left edge, \u003ccode\u003e1\u003c/code\u003e is the right edge."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "anchorY",
                    "doc": "Set Y anchor point of this graphic object.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [
                        {
                            "name": "y",
                            "type": "float",
                            "doc": "A factor \u003ccode\u003e0..1\u003c/code\u003e, where \u003ccode\u003e0\u003c/code\u003e is the top edge, \u003ccode\u003e1\u003c/code\u003e is the bottom edge."
                        }
                    ],
                    "annotations": []
                },
                {
                    "name": "hoverOnly",
                    "doc": "Set this graphic to display only when when mouse is over it.",
                    "returns": {
                        "type": "mchorse.mappet.client.gui.utils.graphics.Graphic"
                    },
                    "arguments": [],
                    "annotations": []
                },
                {
                    "name": "draw",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "context",
                            "type": "GuiContext"
                        },
                        {
                            "name": "elementArea",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "NBTTagCompound"
                    },
                    "arguments": [],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "mchorse.mappet.api.ui.utils.DiscardMethod"
                    ]
                }
            ]
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics.GradientGraphic",
            "doc": "",
            "superclass": "mchorse.mappet.client.gui.utils.graphics.Graphic",
            "interfaces": [],
            "methods": [
                {
                    "name": "drawGraphic",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "area",
                            "type": "Area"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override",
                        "SideOnly"
                    ]
                },
                {
                    "name": "serializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                },
                {
                    "name": "deserializeNBT",
                    "doc": "",
                    "returns": {
                        "type": "void"
                    },
                    "arguments": [
                        {
                            "name": "tag",
                            "type": "NBTTagCompound"
                        }
                    ],
                    "annotations": [
                        "java.lang.Override"
                    ]
                }
            ]
        }
    ],
    "packages": [
        {
            "name": "mchorse.mappet.api.scripts.user.blocks"
        },
        {
            "name": "mchorse.mappet.api.scripts.user.data"
        },
        {
            "name": "mchorse.mappet.api.scripts.user.entities"
        },
        {
            "name": "mchorse.mappet.api.scripts.user",
            "doc": "This section covers main Scripting API.\n\n \u003cp\u003eHere is an example script. If you put following code into world\u0027s\n \u003ccode\u003emappet/scripts/example.js\u003c/code\u003e and execute command\n \u003ccode\u003e/mp script eval @r example\u003c/code\u003e, then you\u0027ll get teleported to\n (249, 56, -789) and you\u0027ll see the message in the chat.\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        // Teleport the subject entity to specific coordinates, and\n        // send a message to everyone on the server\n        c.getSubject().setPosition(249, 56, -789);\n\n        c.send(\"Teleported \" + c.getSubject().getName() + \" to (249, 56, -789)\");\n    }\n }\u003c/pre\u003e"
        },
        {
            "name": "mchorse.mappet.api.scripts.user.items"
        },
        {
            "name": "mchorse.mappet.api.scripts.user.logs"
        },
        {
            "name": "mchorse.mappet.api.scripts.user.mappet",
            "doc": "Welcome to Mappet\u0027s in-game scripting documentation!\n\n \u003cp\u003eScripts are JavaScript (ES 5.1) programs that allow you to program game\n logic.\u003c/p\u003e\n\n \u003cp\u003eScripts are stored in world\u0027s \u003ccode\u003emappet/scripts/\u003c/code\u003e folder.\n The filename without extension of the script is its ID. Depending on\n the configuration of the script, there might be an additional JSON file\n with extra non-code data.\u003c/p\u003e\n\n \u003cp\u003eHere are global variable(s) that are provided by Mappet:\u003c/p\u003e\n\n \u003cul\u003e\n     \u003cli\u003e\u003ccode\u003emappet\u003c/code\u003e, it\u0027s a {@link mchorse.mappet.api.scripts.user.IScriptFactory}.\n     It allows you to create and query different Minecraft or Mappet data structures.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eThere are currently two packages available in Mappet:\u003c/p\u003e\n\n \u003cul\u003e\n     \u003cli\u003e\u003ccode\u003eScripting API\u003c/code\u003e section covers functions that allow you to interact with\n     Minecraft\u0027s mechanics to some extent and with Mappet.\u003c/li\u003e\n     \u003cli\u003e\u003ccode\u003eUI API\u003c/code\u003e section covers functions that allow you to create custom user\n     intrfaces (UI) which can be used for plethora of things.\u003c/li\u003e\n \u003c/ul\u003e\n\n \u003cp\u003eBig thanks to TorayLife for scripting API suggestions.\u003c/p\u003e"
        },
        {
            "name": "mchorse.mappet.api.scripts.user.nbt"
        },
        {
            "name": "mchorse.mappet.api.ui.components",
            "doc": "UI API is an Application Programming Inteface (API) which allows you\n to create custom graphical User Intefaces (UI). It could be used for\n plethora of things:\n\n \u003cp\u003eCustom dialogue system, disabling user input, diaries (discovering\n notes, logs, lore fragments, etc.), mini-games, unlocking doors,\n point-and-click games, player creation screen, custom administration\n tools, custom quest quest offers, and so on.\u003c/p\u003e\n\n \u003cp\u003e\u003cb\u003eAll\u003c/b\u003e UI components are based off {@link mchorse.mappet.api.ui.components.UIComponent},\n therefore they all have UIComponent\u0027s methods.\u003c/p\u003e\n\n \u003cp\u003eHere is a really basic example that drops an item upon pressing\n a button:\u003c/p\u003e\n\n \u003cpre\u003e{@code\n    function main(c)\n    {\n        var ui \u003d mappet.createUI(c, \"handler\").background();\n        var button \u003d ui.button(\"Give me a diamond!\").id(\"button\");\n\n        button.rxy(0.5, 0.5).wh(160, 20).anchor(0.5);\n        c.getSubject().openUI(ui);\n    }\n\n    function handler(c)\n    {\n        var s \u003d c.getSubject();\n        var uiContext \u003d s.getUIContext();\n\n        if (uiContext.getLast() \u003d\u003d\u003d \"button\")\n        {\n            var pos \u003d s.getPosition();\n\n            c.getWorld().dropItemStack(mappet.createItem(\"minecraft:diamond\"), pos.x, pos.y + 2, pos.z);\n        }\n    }\n }\u003c/pre\u003e"
        },
        {
            "name": "mchorse.mappet.client.gui.utils.graphics"
        }
    ]
}